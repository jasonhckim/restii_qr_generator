{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nexports.__esModule = true;\nexports.default = void 0;\nvar R = _interopRequireWildcard(require(\"ramda\"));\nvar _copy = _interopRequireDefault(require(\"./copy\"));\nvar _slice = _interopRequireDefault(require(\"./slice\"));\nvar _concat = _interopRequireDefault(require(\"./concat\"));\nvar _append = _interopRequireDefault(require(\"./append\"));\nvar _getFont = _interopRequireDefault(require(\"./getFont\"));\nvar _isNumber = _interopRequireDefault(require(\"../utils/isNumber\"));\nvar _fromCodePoint = _interopRequireDefault(require(\"../glyph/fromCodePoint\"));\n\n/**\n * Insert glyph to run in the given index\n *\n * @param  {number}  string index\n * @param  {Object}  glyph\n * @param  {Object}  run\n * @return {Object}  run with glyph\n */\nvar insertGlyph = function insertGlyph(index, glyph, run) {\n  if (!glyph) return (0, _copy.default)(run); // Split resolves ligature splitting in case new glyph breaks some\n\n  var leadingRun = (0, _slice.default)(0, index, run);\n  var trailingRun = (0, _slice.default)(index, Infinity, run);\n  return (0, _concat.default)((0, _append.default)(glyph, leadingRun), trailingRun);\n};\n/**\n * Insert either glyph or code point to run in the given index\n *\n * @param  {number}  string index\n * @param  {Object | number}  glyph | codePoint\n * @param  {Object}  run\n * @return {Object}  run with glyph\n */\n\nvar insert = function insert(index, value, run) {\n  var font = (0, _getFont.default)(run);\n  var glyph = (0, _isNumber.default)(value) ? (0, _fromCodePoint.default)(value, font) : value;\n  return insertGlyph(index, glyph, run);\n};\nvar _default = R.curryN(3, insert);\nexports.default = _default;","map":{"version":3,"names":["_interopRequireDefault","require","default","_interopRequireWildcard","exports","__esModule","R","_copy","_slice","_concat","_append","_getFont","_isNumber","_fromCodePoint","insertGlyph","index","glyph","run","leadingRun","trailingRun","Infinity","insert","value","font","_default","curryN"],"sources":["C:/Users/user/restii_qr_generator/frontend/node_modules/@react-pdf/textkit/lib/run/insert.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _copy = _interopRequireDefault(require(\"./copy\"));\n\nvar _slice = _interopRequireDefault(require(\"./slice\"));\n\nvar _concat = _interopRequireDefault(require(\"./concat\"));\n\nvar _append = _interopRequireDefault(require(\"./append\"));\n\nvar _getFont = _interopRequireDefault(require(\"./getFont\"));\n\nvar _isNumber = _interopRequireDefault(require(\"../utils/isNumber\"));\n\nvar _fromCodePoint = _interopRequireDefault(require(\"../glyph/fromCodePoint\"));\n\n/**\n * Insert glyph to run in the given index\n *\n * @param  {number}  string index\n * @param  {Object}  glyph\n * @param  {Object}  run\n * @return {Object}  run with glyph\n */\nvar insertGlyph = function insertGlyph(index, glyph, run) {\n  if (!glyph) return (0, _copy.default)(run); // Split resolves ligature splitting in case new glyph breaks some\n\n  var leadingRun = (0, _slice.default)(0, index, run);\n  var trailingRun = (0, _slice.default)(index, Infinity, run);\n  return (0, _concat.default)((0, _append.default)(glyph, leadingRun), trailingRun);\n};\n/**\n * Insert either glyph or code point to run in the given index\n *\n * @param  {number}  string index\n * @param  {Object | number}  glyph | codePoint\n * @param  {Object}  run\n * @return {Object}  run with glyph\n */\n\n\nvar insert = function insert(index, value, run) {\n  var font = (0, _getFont.default)(run);\n  var glyph = (0, _isNumber.default)(value) ? (0, _fromCodePoint.default)(value, font) : value;\n  return insertGlyph(index, glyph, run);\n};\n\nvar _default = R.curryN(3, insert);\n\nexports.default = _default;"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAA8C,CAAC,CAACC,OAAO;AAE5F,IAAIC,uBAAuB,GAAGF,OAAO,CAAC,+CAA+C,CAAC,CAACC,OAAO;AAE9FE,OAAO,CAACC,UAAU,GAAG,IAAI;AACzBD,OAAO,CAACF,OAAO,GAAG,KAAK,CAAC;AAExB,IAAII,CAAC,GAAGH,uBAAuB,CAACF,OAAO,CAAC,OAAO,CAAC,CAAC;AAEjD,IAAIM,KAAK,GAAGP,sBAAsB,CAACC,OAAO,CAAC,QAAQ,CAAC,CAAC;AAErD,IAAIO,MAAM,GAAGR,sBAAsB,CAACC,OAAO,CAAC,SAAS,CAAC,CAAC;AAEvD,IAAIQ,OAAO,GAAGT,sBAAsB,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC;AAEzD,IAAIS,OAAO,GAAGV,sBAAsB,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC;AAEzD,IAAIU,QAAQ,GAAGX,sBAAsB,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC;AAE3D,IAAIW,SAAS,GAAGZ,sBAAsB,CAACC,OAAO,CAAC,mBAAmB,CAAC,CAAC;AAEpE,IAAIY,cAAc,GAAGb,sBAAsB,CAACC,OAAO,CAAC,wBAAwB,CAAC,CAAC;;AAE9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIa,WAAW,GAAG,SAASA,WAAWA,CAACC,KAAK,EAAEC,KAAK,EAAEC,GAAG,EAAE;EACxD,IAAI,CAACD,KAAK,EAAE,OAAO,CAAC,CAAC,EAAET,KAAK,CAACL,OAAO,EAAEe,GAAG,CAAC,CAAC,CAAC;;EAE5C,IAAIC,UAAU,GAAG,CAAC,CAAC,EAAEV,MAAM,CAACN,OAAO,EAAE,CAAC,EAAEa,KAAK,EAAEE,GAAG,CAAC;EACnD,IAAIE,WAAW,GAAG,CAAC,CAAC,EAAEX,MAAM,CAACN,OAAO,EAAEa,KAAK,EAAEK,QAAQ,EAAEH,GAAG,CAAC;EAC3D,OAAO,CAAC,CAAC,EAAER,OAAO,CAACP,OAAO,EAAE,CAAC,CAAC,EAAEQ,OAAO,CAACR,OAAO,EAAEc,KAAK,EAAEE,UAAU,CAAC,EAAEC,WAAW,CAAC;AACnF,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,IAAIE,MAAM,GAAG,SAASA,MAAMA,CAACN,KAAK,EAAEO,KAAK,EAAEL,GAAG,EAAE;EAC9C,IAAIM,IAAI,GAAG,CAAC,CAAC,EAAEZ,QAAQ,CAACT,OAAO,EAAEe,GAAG,CAAC;EACrC,IAAID,KAAK,GAAG,CAAC,CAAC,EAAEJ,SAAS,CAACV,OAAO,EAAEoB,KAAK,CAAC,GAAG,CAAC,CAAC,EAAET,cAAc,CAACX,OAAO,EAAEoB,KAAK,EAAEC,IAAI,CAAC,GAAGD,KAAK;EAC5F,OAAOR,WAAW,CAACC,KAAK,EAAEC,KAAK,EAAEC,GAAG,CAAC;AACvC,CAAC;AAED,IAAIO,QAAQ,GAAGlB,CAAC,CAACmB,MAAM,CAAC,CAAC,EAAEJ,MAAM,CAAC;AAElCjB,OAAO,CAACF,OAAO,GAAGsB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script"}