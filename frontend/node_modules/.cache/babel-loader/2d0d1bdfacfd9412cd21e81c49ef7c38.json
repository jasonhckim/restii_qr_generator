{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nexports.__esModule = true;\nexports.default = void 0;\nvar R = _interopRequireWildcard(require(\"ramda\"));\nvar _advanceWidth = _interopRequireDefault(require(\"../attributedString/advanceWidth\"));\nvar _leadingOffset = _interopRequireDefault(require(\"../attributedString/leadingOffset\"));\nvar _trailingOffset = _interopRequireDefault(require(\"../attributedString/trailingOffset\"));\nvar _dropLast = _interopRequireDefault(require(\"../attributedString/dropLast\"));\nvar ALIGNMENT_FACTORS = {\n  center: 0.5,\n  right: 1\n};\n/**\n * Remove new line char at the end of line if present\n *\n * @param  {Object}  line\n * @return {Object} line\n */\n\nvar removeNewLine = R.when(R.compose(R.equals('\\n'), R.last, R.prop('string')), _dropLast.default);\nvar getOverflowLeft = R.converge(R.add, [R.propOr(0, 'overflowLeft'), _leadingOffset.default]);\nvar getOverflowRight = R.converge(R.add, [R.propOr(0, 'overflowRight'), _trailingOffset.default]);\n/**\n * Ignore whitespace at the start and end of a line for alignment\n *\n * @param  {Object}  line\n * @return {Object} line\n */\n\nvar adjustOverflow = function adjustOverflow(line) {\n  var overflowLeft = getOverflowLeft(line);\n  var overflowRight = getOverflowRight(line);\n  return R.compose(R.assoc('overflowLeft', overflowLeft), R.assoc('overflowRight', overflowRight), R.evolve({\n    box: R.evolve({\n      x: R.subtract(R.__, overflowLeft),\n      width: R.add(overflowLeft + overflowRight)\n    })\n  }))(line);\n};\n/**\n * Performs line justification by calling appropiate engine\n *\n * @param  {Object}  engines\n * @param  {Object}  layout options\n * @param  {string}  text align\n * @param  {Object}  line\n * @return {Object} line\n */\n\nvar justifyLine = function justifyLine(engines, options, align) {\n  return function (line) {\n    var lineWidth = (0, _advanceWidth.default)(line);\n    var alignFactor = ALIGNMENT_FACTORS[align] || 0;\n    var remainingWidth = Math.max(0, line.box.width - lineWidth);\n    var shouldJustify = align === 'justify' || lineWidth > line.box.width;\n    return R.compose(R.when(R.always(shouldJustify), engines.justification(options)), R.evolve({\n      box: R.evolve({\n        x: R.add(remainingWidth * alignFactor)\n      })\n    }))(line);\n  };\n};\n/**\n * Finalize line by performing line justification\n * and text decoration (using appropiate engines)\n *\n * @param  {Object}  engines\n * @param  {Object}  layout options\n * @param  {Object}  line\n * @param  {number}  line index\n * @param  {Array}  total lines\n * @return {Object} line\n */\n\nvar finalizeBlock = function finalizeBlock(engines, options) {\n  if (engines === void 0) {\n    engines = {};\n  }\n  return function (line, i, lines) {\n    var isLastFragment = i === lines.length - 1;\n    var style = R.pathOr({}, ['runs', 0, 'attributes'], line);\n    var align = isLastFragment ? style.alignLastLine : style.align;\n    return R.compose(engines.textDecoration(options), justifyLine(engines, options, align), adjustOverflow, removeNewLine)(line);\n  };\n};\n/**\n * Finalize line block by performing line justification\n * and text decoration (using appropiate engines)\n *\n * @param  {Object}  engines\n * @param  {Object}  layout options\n * @param  {Array}  line blocks\n * @return {Array} line blocks\n */\n\nvar finalizeFragments = function finalizeFragments(engines, options, blocks) {\n  var blockFinalizer = finalizeBlock(engines, options);\n  return blocks.map(function (block) {\n    return block.map(blockFinalizer);\n  });\n};\nvar _default = R.curryN(3, finalizeFragments);\nexports.default = _default;","map":{"version":3,"names":["_interopRequireDefault","require","default","_interopRequireWildcard","exports","__esModule","R","_advanceWidth","_leadingOffset","_trailingOffset","_dropLast","ALIGNMENT_FACTORS","center","right","removeNewLine","when","compose","equals","last","prop","getOverflowLeft","converge","add","propOr","getOverflowRight","adjustOverflow","line","overflowLeft","overflowRight","assoc","evolve","box","x","subtract","__","width","justifyLine","engines","options","align","lineWidth","alignFactor","remainingWidth","Math","max","shouldJustify","always","justification","finalizeBlock","i","lines","isLastFragment","length","style","pathOr","alignLastLine","textDecoration","finalizeFragments","blocks","blockFinalizer","map","block","_default","curryN"],"sources":["C:/Users/user/restii_qr_generator/frontend/node_modules/@react-pdf/textkit/lib/layout/finalizeFragments.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _advanceWidth = _interopRequireDefault(require(\"../attributedString/advanceWidth\"));\n\nvar _leadingOffset = _interopRequireDefault(require(\"../attributedString/leadingOffset\"));\n\nvar _trailingOffset = _interopRequireDefault(require(\"../attributedString/trailingOffset\"));\n\nvar _dropLast = _interopRequireDefault(require(\"../attributedString/dropLast\"));\n\nvar ALIGNMENT_FACTORS = {\n  center: 0.5,\n  right: 1\n};\n/**\n * Remove new line char at the end of line if present\n *\n * @param  {Object}  line\n * @return {Object} line\n */\n\nvar removeNewLine = R.when(R.compose(R.equals('\\n'), R.last, R.prop('string')), _dropLast.default);\nvar getOverflowLeft = R.converge(R.add, [R.propOr(0, 'overflowLeft'), _leadingOffset.default]);\nvar getOverflowRight = R.converge(R.add, [R.propOr(0, 'overflowRight'), _trailingOffset.default]);\n/**\n * Ignore whitespace at the start and end of a line for alignment\n *\n * @param  {Object}  line\n * @return {Object} line\n */\n\nvar adjustOverflow = function adjustOverflow(line) {\n  var overflowLeft = getOverflowLeft(line);\n  var overflowRight = getOverflowRight(line);\n  return R.compose(R.assoc('overflowLeft', overflowLeft), R.assoc('overflowRight', overflowRight), R.evolve({\n    box: R.evolve({\n      x: R.subtract(R.__, overflowLeft),\n      width: R.add(overflowLeft + overflowRight)\n    })\n  }))(line);\n};\n/**\n * Performs line justification by calling appropiate engine\n *\n * @param  {Object}  engines\n * @param  {Object}  layout options\n * @param  {string}  text align\n * @param  {Object}  line\n * @return {Object} line\n */\n\n\nvar justifyLine = function justifyLine(engines, options, align) {\n  return function (line) {\n    var lineWidth = (0, _advanceWidth.default)(line);\n    var alignFactor = ALIGNMENT_FACTORS[align] || 0;\n    var remainingWidth = Math.max(0, line.box.width - lineWidth);\n    var shouldJustify = align === 'justify' || lineWidth > line.box.width;\n    return R.compose(R.when(R.always(shouldJustify), engines.justification(options)), R.evolve({\n      box: R.evolve({\n        x: R.add(remainingWidth * alignFactor)\n      })\n    }))(line);\n  };\n};\n/**\n * Finalize line by performing line justification\n * and text decoration (using appropiate engines)\n *\n * @param  {Object}  engines\n * @param  {Object}  layout options\n * @param  {Object}  line\n * @param  {number}  line index\n * @param  {Array}  total lines\n * @return {Object} line\n */\n\n\nvar finalizeBlock = function finalizeBlock(engines, options) {\n  if (engines === void 0) {\n    engines = {};\n  }\n\n  return function (line, i, lines) {\n    var isLastFragment = i === lines.length - 1;\n    var style = R.pathOr({}, ['runs', 0, 'attributes'], line);\n    var align = isLastFragment ? style.alignLastLine : style.align;\n    return R.compose(engines.textDecoration(options), justifyLine(engines, options, align), adjustOverflow, removeNewLine)(line);\n  };\n};\n/**\n * Finalize line block by performing line justification\n * and text decoration (using appropiate engines)\n *\n * @param  {Object}  engines\n * @param  {Object}  layout options\n * @param  {Array}  line blocks\n * @return {Array} line blocks\n */\n\n\nvar finalizeFragments = function finalizeFragments(engines, options, blocks) {\n  var blockFinalizer = finalizeBlock(engines, options);\n  return blocks.map(function (block) {\n    return block.map(blockFinalizer);\n  });\n};\n\nvar _default = R.curryN(3, finalizeFragments);\n\nexports.default = _default;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}