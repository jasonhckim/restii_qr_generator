{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nexports.__esModule = true;\nexports.default = void 0;\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\n/**\n * Slice glyph between codePoints range\n * Util for breaking ligatures\n *\n * @param  {number}  start code point index\n * @param  {number}  end code point index\n * @param  {Object}  font to generate new glyph\n * @param  {Object} glyph to be sliced\n * @return {Array} sliced glyph parts\n */\nvar slice = function slice(start, end, font, glyph) {\n  if (!glyph) return [];\n  if (start === end) return [];\n  if (start === 0 && end === glyph.codePoints.length) return [glyph];\n  var codePoints = R.slice(start, end, glyph.codePoints);\n  var string = String.fromCodePoint.apply(String, codePoints);\n  return font ? font.layout(string).glyphs : [glyph];\n};\nvar _default = R.curryN(4, slice);\nexports.default = _default;","map":{"version":3,"names":["_interopRequireWildcard","require","default","exports","__esModule","R","slice","start","end","font","glyph","codePoints","length","string","String","fromCodePoint","apply","layout","glyphs","_default","curryN"],"sources":["C:/Users/user/restii_qr_generator/frontend/node_modules/@react-pdf/textkit/lib/glyph/slice.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\n/**\n * Slice glyph between codePoints range\n * Util for breaking ligatures\n *\n * @param  {number}  start code point index\n * @param  {number}  end code point index\n * @param  {Object}  font to generate new glyph\n * @param  {Object} glyph to be sliced\n * @return {Array} sliced glyph parts\n */\nvar slice = function slice(start, end, font, glyph) {\n  if (!glyph) return [];\n  if (start === end) return [];\n  if (start === 0 && end === glyph.codePoints.length) return [glyph];\n  var codePoints = R.slice(start, end, glyph.codePoints);\n  var string = String.fromCodePoint.apply(String, codePoints);\n  return font ? font.layout(string).glyphs : [glyph];\n};\n\nvar _default = R.curryN(4, slice);\n\nexports.default = _default;"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,uBAAuB,GAAGC,OAAO,CAAC,+CAA+C,CAAC,CAACC,OAAO;AAE9FC,OAAO,CAACC,UAAU,GAAG,IAAI;AACzBD,OAAO,CAACD,OAAO,GAAG,KAAK,CAAC;AAExB,IAAIG,CAAC,GAAGL,uBAAuB,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;;AAEjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIK,KAAK,GAAG,SAASA,KAAKA,CAACC,KAAK,EAAEC,GAAG,EAAEC,IAAI,EAAEC,KAAK,EAAE;EAClD,IAAI,CAACA,KAAK,EAAE,OAAO,EAAE;EACrB,IAAIH,KAAK,KAAKC,GAAG,EAAE,OAAO,EAAE;EAC5B,IAAID,KAAK,KAAK,CAAC,IAAIC,GAAG,KAAKE,KAAK,CAACC,UAAU,CAACC,MAAM,EAAE,OAAO,CAACF,KAAK,CAAC;EAClE,IAAIC,UAAU,GAAGN,CAAC,CAACC,KAAK,CAACC,KAAK,EAAEC,GAAG,EAAEE,KAAK,CAACC,UAAU,CAAC;EACtD,IAAIE,MAAM,GAAGC,MAAM,CAACC,aAAa,CAACC,KAAK,CAACF,MAAM,EAAEH,UAAU,CAAC;EAC3D,OAAOF,IAAI,GAAGA,IAAI,CAACQ,MAAM,CAACJ,MAAM,CAAC,CAACK,MAAM,GAAG,CAACR,KAAK,CAAC;AACpD,CAAC;AAED,IAAIS,QAAQ,GAAGd,CAAC,CAACe,MAAM,CAAC,CAAC,EAAEd,KAAK,CAAC;AAEjCH,OAAO,CAACD,OAAO,GAAGiB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script"}