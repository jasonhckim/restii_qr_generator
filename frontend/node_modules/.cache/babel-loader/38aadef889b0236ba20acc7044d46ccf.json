{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nexports.__esModule = true;\nexports.default = void 0;\nvar R = _interopRequireWildcard(require(\"ramda\"));\nvar P = _interopRequireWildcard(require(\"@react-pdf/primitives\"));\nvar _layoutText = _interopRequireDefault(require(\"../text/layoutText\"));\n\n/* eslint-disable no-param-reassign */\nvar isType = R.propEq('type');\nvar isSvg = isType(P.Svg);\nvar isText = isType(P.Text);\nvar isNotSvg = R.complement(isSvg);\nvar isNotText = R.complement(isText);\nvar shouldIterate = function shouldIterate(node) {\n  return isNotSvg(node) && isNotText(node);\n};\nvar shouldLayoutText = function shouldLayoutText(node) {\n  return isText(node) && !node.lines;\n};\n/**\n * Performs text layout on text node if wasn't calculated before.\n * Text layout is usually performed on Yoga's layout process (via setMeasureFunc),\n * but we need to layout those nodes with fixed width and height.\n *\n * @param {Object} node\n * @returns {Object} layout node\n */\n\nvar resolveTextLayout = function resolveTextLayout(node, fontStore) {\n  if (shouldLayoutText(node)) {\n    var width = node.box.width - (node.box.paddingRight + node.box.paddingLeft);\n    var height = node.box.height - (node.box.paddingTop + node.box.paddingBottom);\n    node.lines = (0, _layoutText.default)(node, width, height, fontStore);\n  }\n  if (shouldIterate(node)) {\n    var mapChild = function mapChild(child) {\n      return resolveTextLayout(child, fontStore);\n    };\n    return R.evolve({\n      children: R.map(mapChild)\n    })(node);\n  }\n  return node;\n};\nvar _default = resolveTextLayout;\nexports.default = _default;","map":{"version":3,"names":["_interopRequireDefault","require","default","_interopRequireWildcard","exports","__esModule","R","P","_layoutText","isType","propEq","isSvg","Svg","isText","Text","isNotSvg","complement","isNotText","shouldIterate","node","shouldLayoutText","lines","resolveTextLayout","fontStore","width","box","paddingRight","paddingLeft","height","paddingTop","paddingBottom","mapChild","child","evolve","children","map","_default"],"sources":["C:/Users/user/restii_qr_generator/frontend/node_modules/@react-pdf/layout/lib/steps/resolveTextLayout.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar P = _interopRequireWildcard(require(\"@react-pdf/primitives\"));\n\nvar _layoutText = _interopRequireDefault(require(\"../text/layoutText\"));\n\n/* eslint-disable no-param-reassign */\nvar isType = R.propEq('type');\nvar isSvg = isType(P.Svg);\nvar isText = isType(P.Text);\nvar isNotSvg = R.complement(isSvg);\nvar isNotText = R.complement(isText);\n\nvar shouldIterate = function shouldIterate(node) {\n  return isNotSvg(node) && isNotText(node);\n};\n\nvar shouldLayoutText = function shouldLayoutText(node) {\n  return isText(node) && !node.lines;\n};\n/**\n * Performs text layout on text node if wasn't calculated before.\n * Text layout is usually performed on Yoga's layout process (via setMeasureFunc),\n * but we need to layout those nodes with fixed width and height.\n *\n * @param {Object} node\n * @returns {Object} layout node\n */\n\n\nvar resolveTextLayout = function resolveTextLayout(node, fontStore) {\n  if (shouldLayoutText(node)) {\n    var width = node.box.width - (node.box.paddingRight + node.box.paddingLeft);\n    var height = node.box.height - (node.box.paddingTop + node.box.paddingBottom);\n    node.lines = (0, _layoutText.default)(node, width, height, fontStore);\n  }\n\n  if (shouldIterate(node)) {\n    var mapChild = function mapChild(child) {\n      return resolveTextLayout(child, fontStore);\n    };\n\n    return R.evolve({\n      children: R.map(mapChild)\n    })(node);\n  }\n\n  return node;\n};\n\nvar _default = resolveTextLayout;\nexports.default = _default;"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAA8C,CAAC,CAACC,OAAO;AAE5F,IAAIC,uBAAuB,GAAGF,OAAO,CAAC,+CAA+C,CAAC,CAACC,OAAO;AAE9FE,OAAO,CAACC,UAAU,GAAG,IAAI;AACzBD,OAAO,CAACF,OAAO,GAAG,KAAK,CAAC;AAExB,IAAII,CAAC,GAAGH,uBAAuB,CAACF,OAAO,CAAC,OAAO,CAAC,CAAC;AAEjD,IAAIM,CAAC,GAAGJ,uBAAuB,CAACF,OAAO,CAAC,uBAAuB,CAAC,CAAC;AAEjE,IAAIO,WAAW,GAAGR,sBAAsB,CAACC,OAAO,CAAC,oBAAoB,CAAC,CAAC;;AAEvE;AACA,IAAIQ,MAAM,GAAGH,CAAC,CAACI,MAAM,CAAC,MAAM,CAAC;AAC7B,IAAIC,KAAK,GAAGF,MAAM,CAACF,CAAC,CAACK,GAAG,CAAC;AACzB,IAAIC,MAAM,GAAGJ,MAAM,CAACF,CAAC,CAACO,IAAI,CAAC;AAC3B,IAAIC,QAAQ,GAAGT,CAAC,CAACU,UAAU,CAACL,KAAK,CAAC;AAClC,IAAIM,SAAS,GAAGX,CAAC,CAACU,UAAU,CAACH,MAAM,CAAC;AAEpC,IAAIK,aAAa,GAAG,SAASA,aAAaA,CAACC,IAAI,EAAE;EAC/C,OAAOJ,QAAQ,CAACI,IAAI,CAAC,IAAIF,SAAS,CAACE,IAAI,CAAC;AAC1C,CAAC;AAED,IAAIC,gBAAgB,GAAG,SAASA,gBAAgBA,CAACD,IAAI,EAAE;EACrD,OAAON,MAAM,CAACM,IAAI,CAAC,IAAI,CAACA,IAAI,CAACE,KAAK;AACpC,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,IAAIC,iBAAiB,GAAG,SAASA,iBAAiBA,CAACH,IAAI,EAAEI,SAAS,EAAE;EAClE,IAAIH,gBAAgB,CAACD,IAAI,CAAC,EAAE;IAC1B,IAAIK,KAAK,GAAGL,IAAI,CAACM,GAAG,CAACD,KAAK,IAAIL,IAAI,CAACM,GAAG,CAACC,YAAY,GAAGP,IAAI,CAACM,GAAG,CAACE,WAAW,CAAC;IAC3E,IAAIC,MAAM,GAAGT,IAAI,CAACM,GAAG,CAACG,MAAM,IAAIT,IAAI,CAACM,GAAG,CAACI,UAAU,GAAGV,IAAI,CAACM,GAAG,CAACK,aAAa,CAAC;IAC7EX,IAAI,CAACE,KAAK,GAAG,CAAC,CAAC,EAAEb,WAAW,CAACN,OAAO,EAAEiB,IAAI,EAAEK,KAAK,EAAEI,MAAM,EAAEL,SAAS,CAAC;EACvE;EAEA,IAAIL,aAAa,CAACC,IAAI,CAAC,EAAE;IACvB,IAAIY,QAAQ,GAAG,SAASA,QAAQA,CAACC,KAAK,EAAE;MACtC,OAAOV,iBAAiB,CAACU,KAAK,EAAET,SAAS,CAAC;IAC5C,CAAC;IAED,OAAOjB,CAAC,CAAC2B,MAAM,CAAC;MACdC,QAAQ,EAAE5B,CAAC,CAAC6B,GAAG,CAACJ,QAAQ;IAC1B,CAAC,CAAC,CAACZ,IAAI,CAAC;EACV;EAEA,OAAOA,IAAI;AACb,CAAC;AAED,IAAIiB,QAAQ,GAAGd,iBAAiB;AAChClB,OAAO,CAACF,OAAO,GAAGkC,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script"}