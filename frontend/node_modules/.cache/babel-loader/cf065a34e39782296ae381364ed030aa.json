{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\n/* eslint-disable no-plusplus */\nvar INFINITY = 10000;\nvar getNextBreakpoint = function getNextBreakpoint(subnodes, widths, lineNumber) {\n  var position = null;\n  var minimumBadness = Infinity;\n  var sum = {\n    width: 0,\n    stretch: 0,\n    shrink: 0\n  };\n  var lineLength = widths[Math.min(lineNumber, widths.length - 1)];\n  var calculateRatio = function calculateRatio(node) {\n    if (sum.width < lineLength) {\n      return sum.stretch - node.stretch > 0 ? (lineLength - sum.width) / sum.stretch : INFINITY;\n    }\n    if (sum.width > lineLength) {\n      return sum.shrink - node.shrink > 0 ? (lineLength - sum.width) / sum.shrink : INFINITY;\n    }\n    return 0;\n  };\n  for (var i = 0; i < subnodes.length; i += 1) {\n    var node = subnodes[i];\n    if (node.type === 'box') {\n      sum.width += node.width;\n    } else if (node.type === 'glue') {\n      sum.width += node.width;\n      sum.stretch += node.stretch;\n      sum.shrink += node.shrink;\n    }\n    if (sum.width - sum.shrink > lineLength) {\n      if (position === null) {\n        var j = i === 0 ? i + 1 : i;\n        while (j < subnodes.length && (subnodes[j].type === 'glue' || subnodes[j].type === 'penalty')) {\n          j++;\n        }\n        position = j - 1;\n      }\n      break;\n    }\n    if (node.type === 'penalty' || node.type === 'glue') {\n      var ratio = calculateRatio(node);\n      var penalty = node.type === 'penalty' ? node.penalty : 0;\n      var badness = 100 * Math.pow(Math.abs(ratio), 3) + penalty;\n      if (minimumBadness >= badness) {\n        position = i;\n        minimumBadness = badness;\n      }\n    }\n  }\n  return sum.width - sum.shrink > lineLength ? position : null;\n};\nvar applyBestFit = function applyBestFit(nodes, widths) {\n  var count = 0;\n  var lineNumber = 0;\n  var subnodes = nodes;\n  var breakpoints = [{\n    position: 0\n  }];\n  while (subnodes.length > 0) {\n    var breakpoint = getNextBreakpoint(subnodes, widths, lineNumber);\n    if (breakpoint !== null) {\n      count += breakpoint;\n      breakpoints.push({\n        position: count\n      });\n      subnodes = subnodes.slice(breakpoint + 1, subnodes.length);\n      count++;\n      lineNumber++;\n    } else {\n      subnodes = [];\n    }\n  }\n  return breakpoints;\n};\nvar _default = applyBestFit;\nexports.default = _default;","map":{"version":3,"names":["exports","__esModule","default","INFINITY","getNextBreakpoint","subnodes","widths","lineNumber","position","minimumBadness","Infinity","sum","width","stretch","shrink","lineLength","Math","min","length","calculateRatio","node","i","type","j","ratio","penalty","badness","pow","abs","applyBestFit","nodes","count","breakpoints","breakpoint","push","slice","_default"],"sources":["C:/Users/user/restii_qr_generator/frontend/node_modules/@react-pdf/textkit/lib/engines/linebreaker/bestFit.js"],"sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\n/* eslint-disable no-plusplus */\nvar INFINITY = 10000;\n\nvar getNextBreakpoint = function getNextBreakpoint(subnodes, widths, lineNumber) {\n  var position = null;\n  var minimumBadness = Infinity;\n  var sum = {\n    width: 0,\n    stretch: 0,\n    shrink: 0\n  };\n  var lineLength = widths[Math.min(lineNumber, widths.length - 1)];\n\n  var calculateRatio = function calculateRatio(node) {\n    if (sum.width < lineLength) {\n      return sum.stretch - node.stretch > 0 ? (lineLength - sum.width) / sum.stretch : INFINITY;\n    }\n\n    if (sum.width > lineLength) {\n      return sum.shrink - node.shrink > 0 ? (lineLength - sum.width) / sum.shrink : INFINITY;\n    }\n\n    return 0;\n  };\n\n  for (var i = 0; i < subnodes.length; i += 1) {\n    var node = subnodes[i];\n\n    if (node.type === 'box') {\n      sum.width += node.width;\n    } else if (node.type === 'glue') {\n      sum.width += node.width;\n      sum.stretch += node.stretch;\n      sum.shrink += node.shrink;\n    }\n\n    if (sum.width - sum.shrink > lineLength) {\n      if (position === null) {\n        var j = i === 0 ? i + 1 : i;\n\n        while (j < subnodes.length && (subnodes[j].type === 'glue' || subnodes[j].type === 'penalty')) {\n          j++;\n        }\n\n        position = j - 1;\n      }\n\n      break;\n    }\n\n    if (node.type === 'penalty' || node.type === 'glue') {\n      var ratio = calculateRatio(node);\n      var penalty = node.type === 'penalty' ? node.penalty : 0;\n      var badness = 100 * Math.pow(Math.abs(ratio), 3) + penalty;\n\n      if (minimumBadness >= badness) {\n        position = i;\n        minimumBadness = badness;\n      }\n    }\n  }\n\n  return sum.width - sum.shrink > lineLength ? position : null;\n};\n\nvar applyBestFit = function applyBestFit(nodes, widths) {\n  var count = 0;\n  var lineNumber = 0;\n  var subnodes = nodes;\n  var breakpoints = [{\n    position: 0\n  }];\n\n  while (subnodes.length > 0) {\n    var breakpoint = getNextBreakpoint(subnodes, widths, lineNumber);\n\n    if (breakpoint !== null) {\n      count += breakpoint;\n      breakpoints.push({\n        position: count\n      });\n      subnodes = subnodes.slice(breakpoint + 1, subnodes.length);\n      count++;\n      lineNumber++;\n    } else {\n      subnodes = [];\n    }\n  }\n\n  return breakpoints;\n};\n\nvar _default = applyBestFit;\nexports.default = _default;"],"mappings":"AAAA,YAAY;;AAEZA,OAAO,CAACC,UAAU,GAAG,IAAI;AACzBD,OAAO,CAACE,OAAO,GAAG,KAAK,CAAC;;AAExB;AACA,IAAIC,QAAQ,GAAG,KAAK;AAEpB,IAAIC,iBAAiB,GAAG,SAASA,iBAAiBA,CAACC,QAAQ,EAAEC,MAAM,EAAEC,UAAU,EAAE;EAC/E,IAAIC,QAAQ,GAAG,IAAI;EACnB,IAAIC,cAAc,GAAGC,QAAQ;EAC7B,IAAIC,GAAG,GAAG;IACRC,KAAK,EAAE,CAAC;IACRC,OAAO,EAAE,CAAC;IACVC,MAAM,EAAE;EACV,CAAC;EACD,IAAIC,UAAU,GAAGT,MAAM,CAACU,IAAI,CAACC,GAAG,CAACV,UAAU,EAAED,MAAM,CAACY,MAAM,GAAG,CAAC,CAAC,CAAC;EAEhE,IAAIC,cAAc,GAAG,SAASA,cAAcA,CAACC,IAAI,EAAE;IACjD,IAAIT,GAAG,CAACC,KAAK,GAAGG,UAAU,EAAE;MAC1B,OAAOJ,GAAG,CAACE,OAAO,GAAGO,IAAI,CAACP,OAAO,GAAG,CAAC,GAAG,CAACE,UAAU,GAAGJ,GAAG,CAACC,KAAK,IAAID,GAAG,CAACE,OAAO,GAAGV,QAAQ;IAC3F;IAEA,IAAIQ,GAAG,CAACC,KAAK,GAAGG,UAAU,EAAE;MAC1B,OAAOJ,GAAG,CAACG,MAAM,GAAGM,IAAI,CAACN,MAAM,GAAG,CAAC,GAAG,CAACC,UAAU,GAAGJ,GAAG,CAACC,KAAK,IAAID,GAAG,CAACG,MAAM,GAAGX,QAAQ;IACxF;IAEA,OAAO,CAAC;EACV,CAAC;EAED,KAAK,IAAIkB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhB,QAAQ,CAACa,MAAM,EAAEG,CAAC,IAAI,CAAC,EAAE;IAC3C,IAAID,IAAI,GAAGf,QAAQ,CAACgB,CAAC,CAAC;IAEtB,IAAID,IAAI,CAACE,IAAI,KAAK,KAAK,EAAE;MACvBX,GAAG,CAACC,KAAK,IAAIQ,IAAI,CAACR,KAAK;IACzB,CAAC,MAAM,IAAIQ,IAAI,CAACE,IAAI,KAAK,MAAM,EAAE;MAC/BX,GAAG,CAACC,KAAK,IAAIQ,IAAI,CAACR,KAAK;MACvBD,GAAG,CAACE,OAAO,IAAIO,IAAI,CAACP,OAAO;MAC3BF,GAAG,CAACG,MAAM,IAAIM,IAAI,CAACN,MAAM;IAC3B;IAEA,IAAIH,GAAG,CAACC,KAAK,GAAGD,GAAG,CAACG,MAAM,GAAGC,UAAU,EAAE;MACvC,IAAIP,QAAQ,KAAK,IAAI,EAAE;QACrB,IAAIe,CAAC,GAAGF,CAAC,KAAK,CAAC,GAAGA,CAAC,GAAG,CAAC,GAAGA,CAAC;QAE3B,OAAOE,CAAC,GAAGlB,QAAQ,CAACa,MAAM,KAAKb,QAAQ,CAACkB,CAAC,CAAC,CAACD,IAAI,KAAK,MAAM,IAAIjB,QAAQ,CAACkB,CAAC,CAAC,CAACD,IAAI,KAAK,SAAS,CAAC,EAAE;UAC7FC,CAAC,EAAE;QACL;QAEAf,QAAQ,GAAGe,CAAC,GAAG,CAAC;MAClB;MAEA;IACF;IAEA,IAAIH,IAAI,CAACE,IAAI,KAAK,SAAS,IAAIF,IAAI,CAACE,IAAI,KAAK,MAAM,EAAE;MACnD,IAAIE,KAAK,GAAGL,cAAc,CAACC,IAAI,CAAC;MAChC,IAAIK,OAAO,GAAGL,IAAI,CAACE,IAAI,KAAK,SAAS,GAAGF,IAAI,CAACK,OAAO,GAAG,CAAC;MACxD,IAAIC,OAAO,GAAG,GAAG,GAAGV,IAAI,CAACW,GAAG,CAACX,IAAI,CAACY,GAAG,CAACJ,KAAK,CAAC,EAAE,CAAC,CAAC,GAAGC,OAAO;MAE1D,IAAIhB,cAAc,IAAIiB,OAAO,EAAE;QAC7BlB,QAAQ,GAAGa,CAAC;QACZZ,cAAc,GAAGiB,OAAO;MAC1B;IACF;EACF;EAEA,OAAOf,GAAG,CAACC,KAAK,GAAGD,GAAG,CAACG,MAAM,GAAGC,UAAU,GAAGP,QAAQ,GAAG,IAAI;AAC9D,CAAC;AAED,IAAIqB,YAAY,GAAG,SAASA,YAAYA,CAACC,KAAK,EAAExB,MAAM,EAAE;EACtD,IAAIyB,KAAK,GAAG,CAAC;EACb,IAAIxB,UAAU,GAAG,CAAC;EAClB,IAAIF,QAAQ,GAAGyB,KAAK;EACpB,IAAIE,WAAW,GAAG,CAAC;IACjBxB,QAAQ,EAAE;EACZ,CAAC,CAAC;EAEF,OAAOH,QAAQ,CAACa,MAAM,GAAG,CAAC,EAAE;IAC1B,IAAIe,UAAU,GAAG7B,iBAAiB,CAACC,QAAQ,EAAEC,MAAM,EAAEC,UAAU,CAAC;IAEhE,IAAI0B,UAAU,KAAK,IAAI,EAAE;MACvBF,KAAK,IAAIE,UAAU;MACnBD,WAAW,CAACE,IAAI,CAAC;QACf1B,QAAQ,EAAEuB;MACZ,CAAC,CAAC;MACF1B,QAAQ,GAAGA,QAAQ,CAAC8B,KAAK,CAACF,UAAU,GAAG,CAAC,EAAE5B,QAAQ,CAACa,MAAM,CAAC;MAC1Da,KAAK,EAAE;MACPxB,UAAU,EAAE;IACd,CAAC,MAAM;MACLF,QAAQ,GAAG,EAAE;IACf;EACF;EAEA,OAAO2B,WAAW;AACpB,CAAC;AAED,IAAII,QAAQ,GAAGP,YAAY;AAC3B7B,OAAO,CAACE,OAAO,GAAGkC,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script"}