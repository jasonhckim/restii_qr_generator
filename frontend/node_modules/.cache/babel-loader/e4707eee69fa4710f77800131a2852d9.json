{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nexports.__esModule = true;\nexports.default = void 0;\nvar R = _interopRequireWildcard(require(\"ramda\"));\nvar _layout = _interopRequireDefault(require(\"@react-pdf/textkit/lib/layout\"));\nvar _linebreaker = _interopRequireDefault(require(\"@react-pdf/textkit/lib/engines/linebreaker\"));\nvar _justification = _interopRequireDefault(require(\"@react-pdf/textkit/lib/engines/justification\"));\nvar _textDecoration = _interopRequireDefault(require(\"@react-pdf/textkit/lib/engines/textDecoration\"));\nvar _scriptItemizer = _interopRequireDefault(require(\"@react-pdf/textkit/lib/engines/scriptItemizer\"));\nvar _wordHyphenation = _interopRequireDefault(require(\"@react-pdf/textkit/lib/engines/wordHyphenation\"));\nvar _fontSubstitution = _interopRequireDefault(require(\"./fontSubstitution\"));\nvar _getAttributedString = _interopRequireDefault(require(\"./getAttributedString\"));\nvar engines = {\n  linebreaker: _linebreaker.default,\n  justification: _justification.default,\n  textDecoration: _textDecoration.default,\n  scriptItemizer: _scriptItemizer.default,\n  wordHyphenation: _wordHyphenation.default,\n  fontSubstitution: _fontSubstitution.default\n};\nvar engine = (0, _layout.default)(engines);\nvar getMaxLines = R.path(['style', 'maxLines']);\nvar getTextOverflow = R.path(['style', 'textOverflow']);\n/**\n * Get layout container for specific text node\n *\n * @param {Number} width\n * @param {Number} height\n * @param {Object} node\n * @returns {Object} layout container\n */\n\nvar getContainer = function getContainer(width, height, node) {\n  var maxLines = getMaxLines(node);\n  var textOverflow = getTextOverflow(node);\n  return {\n    x: 0,\n    y: 0,\n    width: width,\n    maxLines: maxLines,\n    height: height || Infinity,\n    truncateMode: textOverflow\n  };\n};\n/**\n * Get text layout options for specific text node\n *\n * @param {Object} node instance\n * @returns {Object} layout options\n */\n\nvar getLayoutOptions = function getLayoutOptions(fontStore, node) {\n  return {\n    hyphenationPenalty: node.props.hyphenationPenalty,\n    shrinkWhitespaceFactor: {\n      before: -0.5,\n      after: -0.5\n    },\n    hyphenationCallback: node.props.hyphenationCallback || (fontStore === null || fontStore === void 0 ? void 0 : fontStore.getHyphenationCallback()) || null\n  };\n};\n/**\n * Get text lines for given node\n *\n * @param {Object} node\n * @param {Number} container width\n * @param {Number} container height\n * @param {Number} fontStore font store\n * @returns {Array} layout lines\n */\n\nvar layoutText = function layoutText(node, width, height, fontStore) {\n  var attributedString = (0, _getAttributedString.default)(fontStore, node);\n  var container = getContainer(width, height, node);\n  var options = getLayoutOptions(fontStore, node);\n  var lines = engine(attributedString, container, options);\n  return R.reduce(R.concat, [], lines);\n};\nvar _default = R.curryN(4, layoutText);\nexports.default = _default;","map":{"version":3,"names":["_interopRequireDefault","require","default","_interopRequireWildcard","exports","__esModule","R","_layout","_linebreaker","_justification","_textDecoration","_scriptItemizer","_wordHyphenation","_fontSubstitution","_getAttributedString","engines","linebreaker","justification","textDecoration","scriptItemizer","wordHyphenation","fontSubstitution","engine","getMaxLines","path","getTextOverflow","getContainer","width","height","node","maxLines","textOverflow","x","y","Infinity","truncateMode","getLayoutOptions","fontStore","hyphenationPenalty","props","shrinkWhitespaceFactor","before","after","hyphenationCallback","getHyphenationCallback","layoutText","attributedString","container","options","lines","reduce","concat","_default","curryN"],"sources":["C:/Users/user/restii_qr_generator/frontend/node_modules/@react-pdf/layout/lib/text/layoutText.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _layout = _interopRequireDefault(require(\"@react-pdf/textkit/lib/layout\"));\n\nvar _linebreaker = _interopRequireDefault(require(\"@react-pdf/textkit/lib/engines/linebreaker\"));\n\nvar _justification = _interopRequireDefault(require(\"@react-pdf/textkit/lib/engines/justification\"));\n\nvar _textDecoration = _interopRequireDefault(require(\"@react-pdf/textkit/lib/engines/textDecoration\"));\n\nvar _scriptItemizer = _interopRequireDefault(require(\"@react-pdf/textkit/lib/engines/scriptItemizer\"));\n\nvar _wordHyphenation = _interopRequireDefault(require(\"@react-pdf/textkit/lib/engines/wordHyphenation\"));\n\nvar _fontSubstitution = _interopRequireDefault(require(\"./fontSubstitution\"));\n\nvar _getAttributedString = _interopRequireDefault(require(\"./getAttributedString\"));\n\nvar engines = {\n  linebreaker: _linebreaker.default,\n  justification: _justification.default,\n  textDecoration: _textDecoration.default,\n  scriptItemizer: _scriptItemizer.default,\n  wordHyphenation: _wordHyphenation.default,\n  fontSubstitution: _fontSubstitution.default\n};\nvar engine = (0, _layout.default)(engines);\nvar getMaxLines = R.path(['style', 'maxLines']);\nvar getTextOverflow = R.path(['style', 'textOverflow']);\n/**\n * Get layout container for specific text node\n *\n * @param {Number} width\n * @param {Number} height\n * @param {Object} node\n * @returns {Object} layout container\n */\n\nvar getContainer = function getContainer(width, height, node) {\n  var maxLines = getMaxLines(node);\n  var textOverflow = getTextOverflow(node);\n  return {\n    x: 0,\n    y: 0,\n    width: width,\n    maxLines: maxLines,\n    height: height || Infinity,\n    truncateMode: textOverflow\n  };\n};\n/**\n * Get text layout options for specific text node\n *\n * @param {Object} node instance\n * @returns {Object} layout options\n */\n\n\nvar getLayoutOptions = function getLayoutOptions(fontStore, node) {\n  return {\n    hyphenationPenalty: node.props.hyphenationPenalty,\n    shrinkWhitespaceFactor: {\n      before: -0.5,\n      after: -0.5\n    },\n    hyphenationCallback: node.props.hyphenationCallback || (fontStore === null || fontStore === void 0 ? void 0 : fontStore.getHyphenationCallback()) || null\n  };\n};\n/**\n * Get text lines for given node\n *\n * @param {Object} node\n * @param {Number} container width\n * @param {Number} container height\n * @param {Number} fontStore font store\n * @returns {Array} layout lines\n */\n\n\nvar layoutText = function layoutText(node, width, height, fontStore) {\n  var attributedString = (0, _getAttributedString.default)(fontStore, node);\n  var container = getContainer(width, height, node);\n  var options = getLayoutOptions(fontStore, node);\n  var lines = engine(attributedString, container, options);\n  return R.reduce(R.concat, [], lines);\n};\n\nvar _default = R.curryN(4, layoutText);\n\nexports.default = _default;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}