{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nexports.__esModule = true;\nexports.default = void 0;\nvar R = _interopRequireWildcard(require(\"ramda\"));\nvar _hyphen = _interopRequireDefault(require(\"hyphen\"));\nvar _enUs = _interopRequireDefault(require(\"hyphen/patterns/en-us\"));\nvar SOFT_HYPHEN = \"\\xAD\";\nvar hyphenator = (0, _hyphen.default)(_enUs.default);\nvar splitHyphen = R.split(SOFT_HYPHEN);\nvar cache = {};\nvar getParts = R.ifElse(R.contains(SOFT_HYPHEN), splitHyphen, R.o(splitHyphen, hyphenator));\nvar wordHyphenation = function wordHyphenation(options, word) {\n  var cacheKey = \"_\" + word;\n  if (R.isNil(word)) return [];\n  if (cache[cacheKey]) return cache[cacheKey];\n  cache[cacheKey] = getParts(word);\n  return cache[cacheKey];\n};\nvar _default = R.curryN(2, wordHyphenation);\nexports.default = _default;","map":{"version":3,"names":["_interopRequireDefault","require","default","_interopRequireWildcard","exports","__esModule","R","_hyphen","_enUs","SOFT_HYPHEN","hyphenator","splitHyphen","split","cache","getParts","ifElse","contains","o","wordHyphenation","options","word","cacheKey","isNil","_default","curryN"],"sources":["C:/Users/user/restii_qr_generator/frontend/node_modules/@react-pdf/textkit/lib/engines/wordHyphenation/index.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _hyphen = _interopRequireDefault(require(\"hyphen\"));\n\nvar _enUs = _interopRequireDefault(require(\"hyphen/patterns/en-us\"));\n\nvar SOFT_HYPHEN = \"\\xAD\";\nvar hyphenator = (0, _hyphen.default)(_enUs.default);\nvar splitHyphen = R.split(SOFT_HYPHEN);\nvar cache = {};\nvar getParts = R.ifElse(R.contains(SOFT_HYPHEN), splitHyphen, R.o(splitHyphen, hyphenator));\n\nvar wordHyphenation = function wordHyphenation(options, word) {\n  var cacheKey = \"_\" + word;\n  if (R.isNil(word)) return [];\n  if (cache[cacheKey]) return cache[cacheKey];\n  cache[cacheKey] = getParts(word);\n  return cache[cacheKey];\n};\n\nvar _default = R.curryN(2, wordHyphenation);\n\nexports.default = _default;"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAA8C,CAAC,CAACC,OAAO;AAE5F,IAAIC,uBAAuB,GAAGF,OAAO,CAAC,+CAA+C,CAAC,CAACC,OAAO;AAE9FE,OAAO,CAACC,UAAU,GAAG,IAAI;AACzBD,OAAO,CAACF,OAAO,GAAG,KAAK,CAAC;AAExB,IAAII,CAAC,GAAGH,uBAAuB,CAACF,OAAO,CAAC,OAAO,CAAC,CAAC;AAEjD,IAAIM,OAAO,GAAGP,sBAAsB,CAACC,OAAO,CAAC,QAAQ,CAAC,CAAC;AAEvD,IAAIO,KAAK,GAAGR,sBAAsB,CAACC,OAAO,CAAC,uBAAuB,CAAC,CAAC;AAEpE,IAAIQ,WAAW,GAAG,MAAM;AACxB,IAAIC,UAAU,GAAG,CAAC,CAAC,EAAEH,OAAO,CAACL,OAAO,EAAEM,KAAK,CAACN,OAAO,CAAC;AACpD,IAAIS,WAAW,GAAGL,CAAC,CAACM,KAAK,CAACH,WAAW,CAAC;AACtC,IAAII,KAAK,GAAG,CAAC,CAAC;AACd,IAAIC,QAAQ,GAAGR,CAAC,CAACS,MAAM,CAACT,CAAC,CAACU,QAAQ,CAACP,WAAW,CAAC,EAAEE,WAAW,EAAEL,CAAC,CAACW,CAAC,CAACN,WAAW,EAAED,UAAU,CAAC,CAAC;AAE3F,IAAIQ,eAAe,GAAG,SAASA,eAAeA,CAACC,OAAO,EAAEC,IAAI,EAAE;EAC5D,IAAIC,QAAQ,GAAG,GAAG,GAAGD,IAAI;EACzB,IAAId,CAAC,CAACgB,KAAK,CAACF,IAAI,CAAC,EAAE,OAAO,EAAE;EAC5B,IAAIP,KAAK,CAACQ,QAAQ,CAAC,EAAE,OAAOR,KAAK,CAACQ,QAAQ,CAAC;EAC3CR,KAAK,CAACQ,QAAQ,CAAC,GAAGP,QAAQ,CAACM,IAAI,CAAC;EAChC,OAAOP,KAAK,CAACQ,QAAQ,CAAC;AACxB,CAAC;AAED,IAAIE,QAAQ,GAAGjB,CAAC,CAACkB,MAAM,CAAC,CAAC,EAAEN,eAAe,CAAC;AAE3Cd,OAAO,CAACF,OAAO,GAAGqB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script"}