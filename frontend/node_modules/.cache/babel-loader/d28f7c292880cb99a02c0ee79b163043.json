{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nexports.__esModule = true;\nexports.default = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar R = _interopRequireWildcard(require(\"ramda\"));\nvar _fromFragments = _interopRequireDefault(require(\"../attributedString/fromFragments\"));\n\n/**\n * Default word hyphenation engine used when no one provided.\n * Does not perform word hyphenation at all\n *\n * @param  {String} word\n * @return {Array} same word\n */\nvar defaultHyphenationEngine = function defaultHyphenationEngine(word) {\n  return [word];\n};\n/**\n * Wrap words of attribute string\n *\n * @param  {Object} layout engines\n * @param  {Object}  layout options\n * @param  {Object}  attributed string\n * @return {Object} attributed string including syllables\n */\n\nvar wrapWords = function wrapWords(engines, options, attributedString) {\n  if (engines === void 0) {\n    engines = {};\n  }\n  if (options === void 0) {\n    options = {};\n  }\n  var syllables = [];\n  var fragments = [];\n  var hyphenateWord = options.hyphenationCallback || engines.wordHyphenation && engines.wordHyphenation(options) || defaultHyphenationEngine;\n  for (var i = 0; i < attributedString.runs.length; i += 1) {\n    var string = '';\n    var run = attributedString.runs[i];\n    var words = attributedString.string.slice(run.start, run.end).split(/([ ]+)/g).filter(Boolean);\n    for (var j = 0; j < words.length; j += 1) {\n      var word = words[j];\n      var parts = hyphenateWord(word);\n      syllables.push.apply(syllables, parts);\n      string += parts.join('');\n    }\n    fragments.push({\n      string: string,\n      attributes: run.attributes\n    });\n  }\n  return (0, _extends2.default)({}, (0, _fromFragments.default)(fragments), {\n    syllables: syllables\n  });\n};\nvar _default = R.curryN(3, wrapWords);\nexports.default = _default;","map":{"version":3,"names":["_interopRequireWildcard","require","default","_interopRequireDefault","exports","__esModule","_extends2","R","_fromFragments","defaultHyphenationEngine","word","wrapWords","engines","options","attributedString","syllables","fragments","hyphenateWord","hyphenationCallback","wordHyphenation","i","runs","length","string","run","words","slice","start","end","split","filter","Boolean","j","parts","push","apply","join","attributes","_default","curryN"],"sources":["C:/Users/user/restii_qr_generator/frontend/node_modules/@react-pdf/textkit/lib/layout/wrapWords.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _fromFragments = _interopRequireDefault(require(\"../attributedString/fromFragments\"));\n\n/**\n * Default word hyphenation engine used when no one provided.\n * Does not perform word hyphenation at all\n *\n * @param  {String} word\n * @return {Array} same word\n */\nvar defaultHyphenationEngine = function defaultHyphenationEngine(word) {\n  return [word];\n};\n/**\n * Wrap words of attribute string\n *\n * @param  {Object} layout engines\n * @param  {Object}  layout options\n * @param  {Object}  attributed string\n * @return {Object} attributed string including syllables\n */\n\n\nvar wrapWords = function wrapWords(engines, options, attributedString) {\n  if (engines === void 0) {\n    engines = {};\n  }\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  var syllables = [];\n  var fragments = [];\n  var hyphenateWord = options.hyphenationCallback || engines.wordHyphenation && engines.wordHyphenation(options) || defaultHyphenationEngine;\n\n  for (var i = 0; i < attributedString.runs.length; i += 1) {\n    var string = '';\n    var run = attributedString.runs[i];\n    var words = attributedString.string.slice(run.start, run.end).split(/([ ]+)/g).filter(Boolean);\n\n    for (var j = 0; j < words.length; j += 1) {\n      var word = words[j];\n      var parts = hyphenateWord(word);\n      syllables.push.apply(syllables, parts);\n      string += parts.join('');\n    }\n\n    fragments.push({\n      string: string,\n      attributes: run.attributes\n    });\n  }\n\n  return (0, _extends2.default)({}, (0, _fromFragments.default)(fragments), {\n    syllables: syllables\n  });\n};\n\nvar _default = R.curryN(3, wrapWords);\n\nexports.default = _default;"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,uBAAuB,GAAGC,OAAO,CAAC,+CAA+C,CAAC,CAACC,OAAO;AAE9F,IAAIC,sBAAsB,GAAGF,OAAO,CAAC,8CAA8C,CAAC,CAACC,OAAO;AAE5FE,OAAO,CAACC,UAAU,GAAG,IAAI;AACzBD,OAAO,CAACF,OAAO,GAAG,KAAK,CAAC;AAExB,IAAII,SAAS,GAAGH,sBAAsB,CAACF,OAAO,CAAC,gCAAgC,CAAC,CAAC;AAEjF,IAAIM,CAAC,GAAGP,uBAAuB,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;AAEjD,IAAIO,cAAc,GAAGL,sBAAsB,CAACF,OAAO,CAAC,mCAAmC,CAAC,CAAC;;AAEzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIQ,wBAAwB,GAAG,SAASA,wBAAwBA,CAACC,IAAI,EAAE;EACrE,OAAO,CAACA,IAAI,CAAC;AACf,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,IAAIC,SAAS,GAAG,SAASA,SAASA,CAACC,OAAO,EAAEC,OAAO,EAAEC,gBAAgB,EAAE;EACrE,IAAIF,OAAO,KAAK,KAAK,CAAC,EAAE;IACtBA,OAAO,GAAG,CAAC,CAAC;EACd;EAEA,IAAIC,OAAO,KAAK,KAAK,CAAC,EAAE;IACtBA,OAAO,GAAG,CAAC,CAAC;EACd;EAEA,IAAIE,SAAS,GAAG,EAAE;EAClB,IAAIC,SAAS,GAAG,EAAE;EAClB,IAAIC,aAAa,GAAGJ,OAAO,CAACK,mBAAmB,IAAIN,OAAO,CAACO,eAAe,IAAIP,OAAO,CAACO,eAAe,CAACN,OAAO,CAAC,IAAIJ,wBAAwB;EAE1I,KAAK,IAAIW,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,gBAAgB,CAACO,IAAI,CAACC,MAAM,EAAEF,CAAC,IAAI,CAAC,EAAE;IACxD,IAAIG,MAAM,GAAG,EAAE;IACf,IAAIC,GAAG,GAAGV,gBAAgB,CAACO,IAAI,CAACD,CAAC,CAAC;IAClC,IAAIK,KAAK,GAAGX,gBAAgB,CAACS,MAAM,CAACG,KAAK,CAACF,GAAG,CAACG,KAAK,EAAEH,GAAG,CAACI,GAAG,CAAC,CAACC,KAAK,CAAC,SAAS,CAAC,CAACC,MAAM,CAACC,OAAO,CAAC;IAE9F,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,KAAK,CAACH,MAAM,EAAEU,CAAC,IAAI,CAAC,EAAE;MACxC,IAAItB,IAAI,GAAGe,KAAK,CAACO,CAAC,CAAC;MACnB,IAAIC,KAAK,GAAGhB,aAAa,CAACP,IAAI,CAAC;MAC/BK,SAAS,CAACmB,IAAI,CAACC,KAAK,CAACpB,SAAS,EAAEkB,KAAK,CAAC;MACtCV,MAAM,IAAIU,KAAK,CAACG,IAAI,CAAC,EAAE,CAAC;IAC1B;IAEApB,SAAS,CAACkB,IAAI,CAAC;MACbX,MAAM,EAAEA,MAAM;MACdc,UAAU,EAAEb,GAAG,CAACa;IAClB,CAAC,CAAC;EACJ;EAEA,OAAO,CAAC,CAAC,EAAE/B,SAAS,CAACJ,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAEM,cAAc,CAACN,OAAO,EAAEc,SAAS,CAAC,EAAE;IACxED,SAAS,EAAEA;EACb,CAAC,CAAC;AACJ,CAAC;AAED,IAAIuB,QAAQ,GAAG/B,CAAC,CAACgC,MAAM,CAAC,CAAC,EAAE5B,SAAS,CAAC;AAErCP,OAAO,CAACF,OAAO,GAAGoC,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script"}