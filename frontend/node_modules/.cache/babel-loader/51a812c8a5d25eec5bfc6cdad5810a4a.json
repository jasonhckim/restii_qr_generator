{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\nexports.__esModule = true;\nexports.default = void 0;\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\n// Ref: https://www.w3.org/TR/css-backgrounds-3/#borders\n// This constant is used to approximate a symmetrical arc using a cubic Bezier curve.\nvar KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);\nvar clipBorderTop = function clipBorderTop(ctx, layout, style, rtr, rtl) {\n  var top = layout.top,\n    left = layout.left,\n    width = layout.width,\n    height = layout.height;\n  var borderTopWidth = style.borderTopWidth,\n    borderRightWidth = style.borderRightWidth,\n    borderLeftWidth = style.borderLeftWidth; // Clip outer top border edge\n\n  ctx.moveTo(left + rtl, top);\n  ctx.lineTo(left + width - rtr, top); // Ellipse coefficients outer top right cap\n\n  var c0 = rtr * (1.0 - KAPPA); // Clip outer top right cap\n\n  ctx.bezierCurveTo(left + width - c0, top, left + width, top + c0, left + width, top + rtr); // Move down in case the margin exceedes the radius\n\n  var topRightYCoord = top + Math.max(borderTopWidth, rtr);\n  ctx.lineTo(left + width, topRightYCoord); // Clip inner top right cap\n\n  ctx.lineTo(left + width - borderRightWidth, topRightYCoord); // Ellipse coefficients inner top right cap\n\n  var innerTopRightRadiusX = Math.max(rtr - borderRightWidth, 0);\n  var innerTopRightRadiusY = Math.max(rtr - borderTopWidth, 0);\n  var c1 = innerTopRightRadiusX * (1.0 - KAPPA);\n  var c2 = innerTopRightRadiusY * (1.0 - KAPPA); // Clip inner top right cap\n\n  ctx.bezierCurveTo(left + width - borderRightWidth, top + borderTopWidth + c2, left + width - borderRightWidth - c1, top + borderTopWidth, left + width - borderRightWidth - innerTopRightRadiusX, top + borderTopWidth); // Clip inner top border edge\n\n  ctx.lineTo(left + Math.max(rtl, borderLeftWidth), top + borderTopWidth); // Ellipse coefficients inner top left cap\n\n  var innerTopLeftRadiusX = Math.max(rtl - borderLeftWidth, 0);\n  var innerTopLeftRadiusY = Math.max(rtl - borderTopWidth, 0);\n  var c3 = innerTopLeftRadiusX * (1.0 - KAPPA);\n  var c4 = innerTopLeftRadiusY * (1.0 - KAPPA);\n  var topLeftYCoord = top + Math.max(borderTopWidth, rtl); // Clip inner top left cap\n\n  ctx.bezierCurveTo(left + borderLeftWidth + c3, top + borderTopWidth, left + borderLeftWidth, top + borderTopWidth + c4, left + borderLeftWidth, topLeftYCoord);\n  ctx.lineTo(left, topLeftYCoord); // Move down in case the margin exceedes the radius\n\n  ctx.lineTo(left, top + rtl); // Ellipse coefficients outer top left cap\n\n  var c5 = rtl * (1.0 - KAPPA); // Clip outer top left cap\n\n  ctx.bezierCurveTo(left, top + c5, left + c5, top, left + rtl, top);\n  ctx.closePath();\n  ctx.clip(); // Clip border top cap joins\n\n  if (borderRightWidth) {\n    var trSlope = -borderTopWidth / borderRightWidth;\n    ctx.moveTo(left + width / 2, trSlope * (-width / 2) + top);\n    ctx.lineTo(left + width, top);\n    ctx.lineTo(left, top);\n    ctx.lineTo(left, top + height);\n    ctx.closePath();\n    ctx.clip();\n  }\n  if (borderLeftWidth) {\n    var _trSlope = -borderTopWidth / borderLeftWidth;\n    ctx.moveTo(left + width / 2, _trSlope * (-width / 2) + top);\n    ctx.lineTo(left, top);\n    ctx.lineTo(left + width, top);\n    ctx.lineTo(left + width, top + height);\n    ctx.closePath();\n    ctx.clip();\n  }\n};\nvar fillBorderTop = function fillBorderTop(ctx, layout, style, rtr, rtl) {\n  var top = layout.top,\n    left = layout.left,\n    width = layout.width;\n  var borderTopColor = style.borderTopColor,\n    borderTopWidth = style.borderTopWidth,\n    borderTopStyle = style.borderTopStyle,\n    borderRightWidth = style.borderRightWidth,\n    borderLeftWidth = style.borderLeftWidth;\n  var c0 = rtl * (1.0 - KAPPA);\n  var c1 = rtr * (1.0 - KAPPA);\n  ctx.moveTo(left, top + Math.max(rtl, borderTopWidth));\n  ctx.bezierCurveTo(left, top + c0, left + c0, top, left + rtl, top);\n  ctx.lineTo(left + width - rtr, top);\n  ctx.bezierCurveTo(left + width - c1, top, left + width, top + c1, left + width, top + rtr);\n  ctx.strokeColor(borderTopColor);\n  ctx.lineWidth(Math.max(borderRightWidth, borderTopWidth, borderLeftWidth) * 2);\n  if (borderTopStyle === 'dashed') {\n    ctx.dash(borderTopWidth * 2, {\n      space: borderTopWidth * 1.2\n    });\n  } else if (borderTopStyle === 'dotted') {\n    ctx.dash(borderTopWidth, {\n      space: borderTopWidth * 1.2\n    });\n  }\n  ctx.stroke();\n  ctx.undash();\n};\nvar clipBorderRight = function clipBorderRight(ctx, layout, style, rtr, rbr) {\n  var top = layout.top,\n    left = layout.left,\n    width = layout.width,\n    height = layout.height;\n  var borderTopWidth = style.borderTopWidth,\n    borderRightWidth = style.borderRightWidth,\n    borderBottomWidth = style.borderBottomWidth; // Clip outer right border edge\n\n  ctx.moveTo(left + width, top + rtr);\n  ctx.lineTo(left + width, top + height - rbr); // Ellipse coefficients outer bottom right cap\n\n  var c0 = rbr * (1.0 - KAPPA); // Clip outer top right cap\n\n  ctx.bezierCurveTo(left + width, top + height - c0, left + width - c0, top + height, left + width - rbr, top + height); // Move left in case the margin exceedes the radius\n\n  var topBottomXCoord = left + width - Math.max(borderRightWidth, rbr);\n  ctx.lineTo(topBottomXCoord, top + height); // Clip inner bottom right cap\n\n  ctx.lineTo(topBottomXCoord, top + height - borderBottomWidth); // Ellipse coefficients inner bottom right cap\n\n  var innerBottomRightRadiusX = Math.max(rbr - borderRightWidth, 0);\n  var innerBottomRightRadiusY = Math.max(rbr - borderBottomWidth, 0);\n  var c1 = innerBottomRightRadiusX * (1.0 - KAPPA);\n  var c2 = innerBottomRightRadiusY * (1.0 - KAPPA); // Clip inner top right cap\n\n  ctx.bezierCurveTo(left + width - borderRightWidth - c1, top + height - borderBottomWidth, left + width - borderRightWidth, top + height - borderBottomWidth - c2, left + width - borderRightWidth, top + height - Math.max(rbr, borderBottomWidth)); // Clip inner right border edge\n\n  ctx.lineTo(left + width - borderRightWidth, top + Math.max(rtr, borderTopWidth)); // Ellipse coefficients inner top right cap\n\n  var innerTopRightRadiusX = Math.max(rtr - borderRightWidth, 0);\n  var innerTopRightRadiusY = Math.max(rtr - borderTopWidth, 0);\n  var c3 = innerTopRightRadiusX * (1.0 - KAPPA);\n  var c4 = innerTopRightRadiusY * (1.0 - KAPPA);\n  var topRightXCoord = left + width - Math.max(rtr, borderRightWidth); // Clip inner top left cap\n\n  ctx.bezierCurveTo(left + width - borderRightWidth, top + borderTopWidth + c4, left + width - borderRightWidth - c3, top + borderTopWidth, topRightXCoord, top + borderTopWidth);\n  ctx.lineTo(topRightXCoord, top); // Move right in case the margin exceedes the radius\n\n  ctx.lineTo(left + width - rtr, top); // Ellipse coefficients outer top right cap\n\n  var c5 = rtr * (1.0 - KAPPA); // Clip outer top right cap\n\n  ctx.bezierCurveTo(left + width - c5, top, left + width, top + c5, left + width, top + rtr);\n  ctx.closePath();\n  ctx.clip(); // Clip border right cap joins\n\n  if (borderTopWidth) {\n    var trSlope = -borderTopWidth / borderRightWidth;\n    ctx.moveTo(left + width / 2, trSlope * (-width / 2) + top);\n    ctx.lineTo(left + width, top);\n    ctx.lineTo(left + width, top + height);\n    ctx.lineTo(left, top + height);\n    ctx.closePath();\n    ctx.clip();\n  }\n  if (borderBottomWidth) {\n    var brSlope = borderBottomWidth / borderRightWidth;\n    ctx.moveTo(left + width / 2, brSlope * (-width / 2) + top + height);\n    ctx.lineTo(left + width, top + height);\n    ctx.lineTo(left + width, top);\n    ctx.lineTo(left, top);\n    ctx.closePath();\n    ctx.clip();\n  }\n};\nvar fillBorderRight = function fillBorderRight(ctx, layout, style, rtr, rbr) {\n  var top = layout.top,\n    left = layout.left,\n    width = layout.width,\n    height = layout.height;\n  var borderRightColor = style.borderRightColor,\n    borderRightStyle = style.borderRightStyle,\n    borderRightWidth = style.borderRightWidth,\n    borderTopWidth = style.borderTopWidth,\n    borderBottomWidth = style.borderBottomWidth;\n  var c0 = rbr * (1.0 - KAPPA);\n  var c1 = rtr * (1.0 - KAPPA);\n  ctx.moveTo(left + width - rtr, top);\n  ctx.bezierCurveTo(left + width - c1, top, left + width, top + c1, left + width, top + rtr);\n  ctx.lineTo(left + width, top + height - rbr);\n  ctx.bezierCurveTo(left + width, top + height - c0, left + width - c0, top + height, left + width - rbr, top + height);\n  ctx.strokeColor(borderRightColor);\n  ctx.lineWidth(Math.max(borderRightWidth, borderTopWidth, borderBottomWidth) * 2);\n  if (borderRightStyle === 'dashed') {\n    ctx.dash(borderRightWidth * 2, {\n      space: borderRightWidth * 1.2\n    });\n  } else if (borderRightStyle === 'dotted') {\n    ctx.dash(borderRightWidth, {\n      space: borderRightWidth * 1.2\n    });\n  }\n  ctx.stroke();\n  ctx.undash();\n};\nvar clipBorderBottom = function clipBorderBottom(ctx, layout, style, rbl, rbr) {\n  var top = layout.top,\n    left = layout.left,\n    width = layout.width,\n    height = layout.height;\n  var borderBottomWidth = style.borderBottomWidth,\n    borderRightWidth = style.borderRightWidth,\n    borderLeftWidth = style.borderLeftWidth; // Clip outer top border edge\n\n  ctx.moveTo(left + width - rbr, top + height);\n  ctx.lineTo(left + rbl, top + height); // Ellipse coefficients outer top right cap\n\n  var c0 = rbl * (1.0 - KAPPA); // Clip outer top right cap\n\n  ctx.bezierCurveTo(left + c0, top + height, left, top + height - c0, left, top + height - rbl); // Move up in case the margin exceedes the radius\n\n  var bottomLeftYCoord = top + height - Math.max(borderBottomWidth, rbl);\n  ctx.lineTo(left, bottomLeftYCoord); // Clip inner bottom left cap\n\n  ctx.lineTo(left + borderLeftWidth, bottomLeftYCoord); // Ellipse coefficients inner top right cap\n\n  var innerBottomLeftRadiusX = Math.max(rbl - borderLeftWidth, 0);\n  var innerBottomLeftRadiusY = Math.max(rbl - borderBottomWidth, 0);\n  var c1 = innerBottomLeftRadiusX * (1.0 - KAPPA);\n  var c2 = innerBottomLeftRadiusY * (1.0 - KAPPA); // Clip inner bottom left cap\n\n  ctx.bezierCurveTo(left + borderLeftWidth, top + height - borderBottomWidth - c2, left + borderLeftWidth + c1, top + height - borderBottomWidth, left + borderLeftWidth + innerBottomLeftRadiusX, top + height - borderBottomWidth); // Clip inner bottom border edge\n\n  ctx.lineTo(left + width - Math.max(rbr, borderRightWidth), top + height - borderBottomWidth); // Ellipse coefficients inner top left cap\n\n  var innerBottomRightRadiusX = Math.max(rbr - borderRightWidth, 0);\n  var innerBottomRightRadiusY = Math.max(rbr - borderBottomWidth, 0);\n  var c3 = innerBottomRightRadiusX * (1.0 - KAPPA);\n  var c4 = innerBottomRightRadiusY * (1.0 - KAPPA);\n  var bottomRightYCoord = top + height - Math.max(borderBottomWidth, rbr); // Clip inner top left cap\n\n  ctx.bezierCurveTo(left + width - borderRightWidth - c3, top + height - borderBottomWidth, left + width - borderRightWidth, top + height - borderBottomWidth - c4, left + width - borderRightWidth, bottomRightYCoord);\n  ctx.lineTo(left + width, bottomRightYCoord); // Move down in case the margin exceedes the radius\n\n  ctx.lineTo(left + width, top + height - rbr); // Ellipse coefficients outer top left cap\n\n  var c5 = rbr * (1.0 - KAPPA); // Clip outer top left cap\n\n  ctx.bezierCurveTo(left + width, top + height - c5, left + width - c5, top + height, left + width - rbr, top + height);\n  ctx.closePath();\n  ctx.clip(); // Clip border bottom cap joins\n\n  if (borderRightWidth) {\n    var brSlope = borderBottomWidth / borderRightWidth;\n    ctx.moveTo(left + width / 2, brSlope * (-width / 2) + top + height);\n    ctx.lineTo(left + width, top + height);\n    ctx.lineTo(left, top + height);\n    ctx.lineTo(left, top);\n    ctx.closePath();\n    ctx.clip();\n  }\n  if (borderLeftWidth) {\n    var trSlope = -borderBottomWidth / borderLeftWidth;\n    ctx.moveTo(left + width / 2, trSlope * (width / 2) + top + height);\n    ctx.lineTo(left, top + height);\n    ctx.lineTo(left + width, top + height);\n    ctx.lineTo(left + width, top);\n    ctx.closePath();\n    ctx.clip();\n  }\n};\nvar fillBorderBottom = function fillBorderBottom(ctx, layout, style, rbl, rbr) {\n  var top = layout.top,\n    left = layout.left,\n    width = layout.width,\n    height = layout.height;\n  var borderBottomColor = style.borderBottomColor,\n    borderBottomStyle = style.borderBottomStyle,\n    borderBottomWidth = style.borderBottomWidth,\n    borderRightWidth = style.borderRightWidth,\n    borderLeftWidth = style.borderLeftWidth;\n  var c0 = rbl * (1.0 - KAPPA);\n  var c1 = rbr * (1.0 - KAPPA);\n  ctx.moveTo(left + width, top + height - rbr);\n  ctx.bezierCurveTo(left + width, top + height - c1, left + width - c1, top + height, left + width - rbr, top + height);\n  ctx.lineTo(left + rbl, top + height);\n  ctx.bezierCurveTo(left + c0, top + height, left, top + height - c0, left, top + height - rbl);\n  ctx.strokeColor(borderBottomColor);\n  ctx.lineWidth(Math.max(borderBottomWidth, borderRightWidth, borderLeftWidth) * 2);\n  if (borderBottomStyle === 'dashed') {\n    ctx.dash(borderBottomWidth * 2, {\n      space: borderBottomWidth * 1.2\n    });\n  } else if (borderBottomStyle === 'dotted') {\n    ctx.dash(borderBottomWidth, {\n      space: borderBottomWidth * 1.2\n    });\n  }\n  ctx.stroke();\n  ctx.undash();\n};\nvar clipBorderLeft = function clipBorderLeft(ctx, layout, style, rbl, rtl) {\n  var top = layout.top,\n    left = layout.left,\n    width = layout.width,\n    height = layout.height;\n  var borderTopWidth = style.borderTopWidth,\n    borderLeftWidth = style.borderLeftWidth,\n    borderBottomWidth = style.borderBottomWidth; // Clip outer left border edge\n\n  ctx.moveTo(left, top + height - rbl);\n  ctx.lineTo(left, top + rtl); // Ellipse coefficients outer top left cap\n\n  var c0 = rtl * (1.0 - KAPPA); // Clip outer top left cap\n\n  ctx.bezierCurveTo(left, top + c0, left + c0, top, left + rtl, top); // Move right in case the margin exceedes the radius\n\n  var topLeftCoordX = left + Math.max(borderLeftWidth, rtl);\n  ctx.lineTo(topLeftCoordX, top); // Clip inner top left cap\n\n  ctx.lineTo(topLeftCoordX, top + borderTopWidth); // Ellipse coefficients inner top left cap\n\n  var innerTopLeftRadiusX = Math.max(rtl - borderLeftWidth, 0);\n  var innerTopLeftRadiusY = Math.max(rtl - borderTopWidth, 0);\n  var c1 = innerTopLeftRadiusX * (1.0 - KAPPA);\n  var c2 = innerTopLeftRadiusY * (1.0 - KAPPA); // Clip inner top right cap\n\n  ctx.bezierCurveTo(left + borderLeftWidth + c1, top + borderTopWidth, left + borderLeftWidth, top + borderTopWidth + c2, left + borderLeftWidth, top + Math.max(rtl, borderTopWidth)); // Clip inner left border edge\n\n  ctx.lineTo(left + borderLeftWidth, top + height - Math.max(rbl, borderBottomWidth)); // Ellipse coefficients inner bottom left cap\n\n  var innerBottomLeftRadiusX = Math.max(rbl - borderLeftWidth, 0);\n  var innerBottomLeftRadiusY = Math.max(rbl - borderBottomWidth, 0);\n  var c3 = innerBottomLeftRadiusX * (1.0 - KAPPA);\n  var c4 = innerBottomLeftRadiusY * (1.0 - KAPPA);\n  var bottomLeftXCoord = left + Math.max(rbl, borderLeftWidth); // Clip inner top left cap\n\n  ctx.bezierCurveTo(left + borderLeftWidth, top + height - borderBottomWidth - c4, left + borderLeftWidth + c3, top + height - borderBottomWidth, bottomLeftXCoord, top + height - borderBottomWidth);\n  ctx.lineTo(bottomLeftXCoord, top + height); // Move left in case the margin exceedes the radius\n\n  ctx.lineTo(left + rbl, top + height); // Ellipse coefficients outer top right cap\n\n  var c5 = rbl * (1.0 - KAPPA); // Clip outer top right cap\n\n  ctx.bezierCurveTo(left + c5, top + height, left, top + height - c5, left, top + height - rbl);\n  ctx.closePath();\n  ctx.clip(); // Clip border right cap joins\n\n  if (borderBottomWidth) {\n    var trSlope = -borderBottomWidth / borderLeftWidth;\n    ctx.moveTo(left + width / 2, trSlope * (width / 2) + top + height);\n    ctx.lineTo(left, top + height);\n    ctx.lineTo(left, top);\n    ctx.lineTo(left + width, top);\n    ctx.closePath();\n    ctx.clip();\n  }\n  if (borderBottomWidth) {\n    var _trSlope2 = -borderTopWidth / borderLeftWidth;\n    ctx.moveTo(left + width / 2, _trSlope2 * (-width / 2) + top);\n    ctx.lineTo(left, top);\n    ctx.lineTo(left, top + height);\n    ctx.lineTo(left + width, top + height);\n    ctx.closePath();\n    ctx.clip();\n  }\n};\nvar fillBorderLeft = function fillBorderLeft(ctx, layout, style, rbl, rtl) {\n  var top = layout.top,\n    left = layout.left,\n    height = layout.height;\n  var borderLeftColor = style.borderLeftColor,\n    borderLeftStyle = style.borderLeftStyle,\n    borderLeftWidth = style.borderLeftWidth,\n    borderTopWidth = style.borderTopWidth,\n    borderBottomWidth = style.borderBottomWidth;\n  var c0 = rbl * (1.0 - KAPPA);\n  var c1 = rtl * (1.0 - KAPPA);\n  ctx.moveTo(left + rbl, top + height);\n  ctx.bezierCurveTo(left + c0, top + height, left, top + height - c0, left, top + height - rbl);\n  ctx.lineTo(left, top + rtl);\n  ctx.bezierCurveTo(left, top + c1, left + c1, top, left + rtl, top);\n  ctx.strokeColor(borderLeftColor);\n  ctx.lineWidth(Math.max(borderLeftWidth, borderTopWidth, borderBottomWidth) * 2);\n  if (borderLeftStyle === 'dashed') {\n    ctx.dash(borderLeftWidth * 2, {\n      space: borderLeftWidth * 1.2\n    });\n  } else if (borderLeftStyle === 'dotted') {\n    ctx.dash(borderLeftWidth, {\n      space: borderLeftWidth * 1.2\n    });\n  }\n  ctx.stroke();\n  ctx.undash();\n};\nvar shouldRenderBorders = function shouldRenderBorders(node) {\n  return node.box && (node.box.borderTopWidth || node.box.borderRightWidth || node.box.borderBottomWidth || node.box.borderLeftWidth);\n};\nvar renderBorders = function renderBorders(ctx, node) {\n  if (!shouldRenderBorders(node)) return node;\n  var _node$box = node.box,\n    width = _node$box.width,\n    height = _node$box.height,\n    borderTopWidth = _node$box.borderTopWidth,\n    borderLeftWidth = _node$box.borderLeftWidth,\n    borderRightWidth = _node$box.borderRightWidth,\n    borderBottomWidth = _node$box.borderBottomWidth;\n  var _node$style = node.style,\n    opacity = _node$style.opacity,\n    _node$style$borderTop = _node$style.borderTopLeftRadius,\n    borderTopLeftRadius = _node$style$borderTop === void 0 ? 0 : _node$style$borderTop,\n    _node$style$borderTop2 = _node$style.borderTopRightRadius,\n    borderTopRightRadius = _node$style$borderTop2 === void 0 ? 0 : _node$style$borderTop2,\n    _node$style$borderBot = _node$style.borderBottomLeftRadius,\n    borderBottomLeftRadius = _node$style$borderBot === void 0 ? 0 : _node$style$borderBot,\n    _node$style$borderBot2 = _node$style.borderBottomRightRadius,\n    borderBottomRightRadius = _node$style$borderBot2 === void 0 ? 0 : _node$style$borderBot2,\n    _node$style$borderTop3 = _node$style.borderTopColor,\n    borderTopColor = _node$style$borderTop3 === void 0 ? 'black' : _node$style$borderTop3,\n    _node$style$borderTop4 = _node$style.borderTopStyle,\n    borderTopStyle = _node$style$borderTop4 === void 0 ? 'solid' : _node$style$borderTop4,\n    _node$style$borderLef = _node$style.borderLeftColor,\n    borderLeftColor = _node$style$borderLef === void 0 ? 'black' : _node$style$borderLef,\n    _node$style$borderLef2 = _node$style.borderLeftStyle,\n    borderLeftStyle = _node$style$borderLef2 === void 0 ? 'solid' : _node$style$borderLef2,\n    _node$style$borderRig = _node$style.borderRightColor,\n    borderRightColor = _node$style$borderRig === void 0 ? 'black' : _node$style$borderRig,\n    _node$style$borderRig2 = _node$style.borderRightStyle,\n    borderRightStyle = _node$style$borderRig2 === void 0 ? 'solid' : _node$style$borderRig2,\n    _node$style$borderBot3 = _node$style.borderBottomColor,\n    borderBottomColor = _node$style$borderBot3 === void 0 ? 'black' : _node$style$borderBot3,\n    _node$style$borderBot4 = _node$style.borderBottomStyle,\n    borderBottomStyle = _node$style$borderBot4 === void 0 ? 'solid' : _node$style$borderBot4;\n  var style = {\n    borderTopColor: borderTopColor,\n    borderTopWidth: borderTopWidth,\n    borderTopStyle: borderTopStyle,\n    borderLeftColor: borderLeftColor,\n    borderLeftWidth: borderLeftWidth,\n    borderLeftStyle: borderLeftStyle,\n    borderRightColor: borderRightColor,\n    borderRightWidth: borderRightWidth,\n    borderRightStyle: borderRightStyle,\n    borderBottomColor: borderBottomColor,\n    borderBottomWidth: borderBottomWidth,\n    borderBottomStyle: borderBottomStyle,\n    borderTopLeftRadius: borderTopLeftRadius,\n    borderTopRightRadius: borderTopRightRadius,\n    borderBottomLeftRadius: borderBottomLeftRadius,\n    borderBottomRightRadius: borderBottomRightRadius\n  };\n  var rtr = Math.min(borderTopRightRadius, 0.5 * width, 0.5 * height);\n  var rtl = Math.min(borderTopLeftRadius, 0.5 * width, 0.5 * height);\n  var rbr = Math.min(borderBottomRightRadius, 0.5 * width, 0.5 * height);\n  var rbl = Math.min(borderBottomLeftRadius, 0.5 * width, 0.5 * height);\n  ctx.save();\n  ctx.strokeOpacity(opacity);\n  if (borderTopWidth) {\n    ctx.save();\n    clipBorderTop(ctx, node.box, style, rtr, rtl);\n    fillBorderTop(ctx, node.box, style, rtr, rtl);\n    ctx.restore();\n  }\n  if (borderRightWidth) {\n    ctx.save();\n    clipBorderRight(ctx, node.box, style, rtr, rbr);\n    fillBorderRight(ctx, node.box, style, rtr, rbr);\n    ctx.restore();\n  }\n  if (borderBottomWidth) {\n    ctx.save();\n    clipBorderBottom(ctx, node.box, style, rbl, rbr);\n    fillBorderBottom(ctx, node.box, style, rbl, rbr);\n    ctx.restore();\n  }\n  if (borderLeftWidth) {\n    ctx.save();\n    clipBorderLeft(ctx, node.box, style, rbl, rtl);\n    fillBorderLeft(ctx, node.box, style, rbl, rtl);\n    ctx.restore();\n  }\n  ctx.restore();\n  return node;\n};\nvar _default = R.curryN(2, renderBorders);\nexports.default = _default;","map":{"version":3,"names":["_interopRequireWildcard","require","default","exports","__esModule","R","KAPPA","Math","sqrt","clipBorderTop","ctx","layout","style","rtr","rtl","top","left","width","height","borderTopWidth","borderRightWidth","borderLeftWidth","moveTo","lineTo","c0","bezierCurveTo","topRightYCoord","max","innerTopRightRadiusX","innerTopRightRadiusY","c1","c2","innerTopLeftRadiusX","innerTopLeftRadiusY","c3","c4","topLeftYCoord","c5","closePath","clip","trSlope","_trSlope","fillBorderTop","borderTopColor","borderTopStyle","strokeColor","lineWidth","dash","space","stroke","undash","clipBorderRight","rbr","borderBottomWidth","topBottomXCoord","innerBottomRightRadiusX","innerBottomRightRadiusY","topRightXCoord","brSlope","fillBorderRight","borderRightColor","borderRightStyle","clipBorderBottom","rbl","bottomLeftYCoord","innerBottomLeftRadiusX","innerBottomLeftRadiusY","bottomRightYCoord","fillBorderBottom","borderBottomColor","borderBottomStyle","clipBorderLeft","topLeftCoordX","bottomLeftXCoord","_trSlope2","fillBorderLeft","borderLeftColor","borderLeftStyle","shouldRenderBorders","node","box","renderBorders","_node$box","_node$style","opacity","_node$style$borderTop","borderTopLeftRadius","_node$style$borderTop2","borderTopRightRadius","_node$style$borderBot","borderBottomLeftRadius","_node$style$borderBot2","borderBottomRightRadius","_node$style$borderTop3","_node$style$borderTop4","_node$style$borderLef","_node$style$borderLef2","_node$style$borderRig","_node$style$borderRig2","_node$style$borderBot3","_node$style$borderBot4","min","save","strokeOpacity","restore","_default","curryN"],"sources":["C:/Users/user/restii_qr_generator/frontend/node_modules/@react-pdf/render/lib/primitives/renderBorders.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\n// Ref: https://www.w3.org/TR/css-backgrounds-3/#borders\n// This constant is used to approximate a symmetrical arc using a cubic Bezier curve.\nvar KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);\n\nvar clipBorderTop = function clipBorderTop(ctx, layout, style, rtr, rtl) {\n  var top = layout.top,\n      left = layout.left,\n      width = layout.width,\n      height = layout.height;\n  var borderTopWidth = style.borderTopWidth,\n      borderRightWidth = style.borderRightWidth,\n      borderLeftWidth = style.borderLeftWidth; // Clip outer top border edge\n\n  ctx.moveTo(left + rtl, top);\n  ctx.lineTo(left + width - rtr, top); // Ellipse coefficients outer top right cap\n\n  var c0 = rtr * (1.0 - KAPPA); // Clip outer top right cap\n\n  ctx.bezierCurveTo(left + width - c0, top, left + width, top + c0, left + width, top + rtr); // Move down in case the margin exceedes the radius\n\n  var topRightYCoord = top + Math.max(borderTopWidth, rtr);\n  ctx.lineTo(left + width, topRightYCoord); // Clip inner top right cap\n\n  ctx.lineTo(left + width - borderRightWidth, topRightYCoord); // Ellipse coefficients inner top right cap\n\n  var innerTopRightRadiusX = Math.max(rtr - borderRightWidth, 0);\n  var innerTopRightRadiusY = Math.max(rtr - borderTopWidth, 0);\n  var c1 = innerTopRightRadiusX * (1.0 - KAPPA);\n  var c2 = innerTopRightRadiusY * (1.0 - KAPPA); // Clip inner top right cap\n\n  ctx.bezierCurveTo(left + width - borderRightWidth, top + borderTopWidth + c2, left + width - borderRightWidth - c1, top + borderTopWidth, left + width - borderRightWidth - innerTopRightRadiusX, top + borderTopWidth); // Clip inner top border edge\n\n  ctx.lineTo(left + Math.max(rtl, borderLeftWidth), top + borderTopWidth); // Ellipse coefficients inner top left cap\n\n  var innerTopLeftRadiusX = Math.max(rtl - borderLeftWidth, 0);\n  var innerTopLeftRadiusY = Math.max(rtl - borderTopWidth, 0);\n  var c3 = innerTopLeftRadiusX * (1.0 - KAPPA);\n  var c4 = innerTopLeftRadiusY * (1.0 - KAPPA);\n  var topLeftYCoord = top + Math.max(borderTopWidth, rtl); // Clip inner top left cap\n\n  ctx.bezierCurveTo(left + borderLeftWidth + c3, top + borderTopWidth, left + borderLeftWidth, top + borderTopWidth + c4, left + borderLeftWidth, topLeftYCoord);\n  ctx.lineTo(left, topLeftYCoord); // Move down in case the margin exceedes the radius\n\n  ctx.lineTo(left, top + rtl); // Ellipse coefficients outer top left cap\n\n  var c5 = rtl * (1.0 - KAPPA); // Clip outer top left cap\n\n  ctx.bezierCurveTo(left, top + c5, left + c5, top, left + rtl, top);\n  ctx.closePath();\n  ctx.clip(); // Clip border top cap joins\n\n  if (borderRightWidth) {\n    var trSlope = -borderTopWidth / borderRightWidth;\n    ctx.moveTo(left + width / 2, trSlope * (-width / 2) + top);\n    ctx.lineTo(left + width, top);\n    ctx.lineTo(left, top);\n    ctx.lineTo(left, top + height);\n    ctx.closePath();\n    ctx.clip();\n  }\n\n  if (borderLeftWidth) {\n    var _trSlope = -borderTopWidth / borderLeftWidth;\n\n    ctx.moveTo(left + width / 2, _trSlope * (-width / 2) + top);\n    ctx.lineTo(left, top);\n    ctx.lineTo(left + width, top);\n    ctx.lineTo(left + width, top + height);\n    ctx.closePath();\n    ctx.clip();\n  }\n};\n\nvar fillBorderTop = function fillBorderTop(ctx, layout, style, rtr, rtl) {\n  var top = layout.top,\n      left = layout.left,\n      width = layout.width;\n  var borderTopColor = style.borderTopColor,\n      borderTopWidth = style.borderTopWidth,\n      borderTopStyle = style.borderTopStyle,\n      borderRightWidth = style.borderRightWidth,\n      borderLeftWidth = style.borderLeftWidth;\n  var c0 = rtl * (1.0 - KAPPA);\n  var c1 = rtr * (1.0 - KAPPA);\n  ctx.moveTo(left, top + Math.max(rtl, borderTopWidth));\n  ctx.bezierCurveTo(left, top + c0, left + c0, top, left + rtl, top);\n  ctx.lineTo(left + width - rtr, top);\n  ctx.bezierCurveTo(left + width - c1, top, left + width, top + c1, left + width, top + rtr);\n  ctx.strokeColor(borderTopColor);\n  ctx.lineWidth(Math.max(borderRightWidth, borderTopWidth, borderLeftWidth) * 2);\n\n  if (borderTopStyle === 'dashed') {\n    ctx.dash(borderTopWidth * 2, {\n      space: borderTopWidth * 1.2\n    });\n  } else if (borderTopStyle === 'dotted') {\n    ctx.dash(borderTopWidth, {\n      space: borderTopWidth * 1.2\n    });\n  }\n\n  ctx.stroke();\n  ctx.undash();\n};\n\nvar clipBorderRight = function clipBorderRight(ctx, layout, style, rtr, rbr) {\n  var top = layout.top,\n      left = layout.left,\n      width = layout.width,\n      height = layout.height;\n  var borderTopWidth = style.borderTopWidth,\n      borderRightWidth = style.borderRightWidth,\n      borderBottomWidth = style.borderBottomWidth; // Clip outer right border edge\n\n  ctx.moveTo(left + width, top + rtr);\n  ctx.lineTo(left + width, top + height - rbr); // Ellipse coefficients outer bottom right cap\n\n  var c0 = rbr * (1.0 - KAPPA); // Clip outer top right cap\n\n  ctx.bezierCurveTo(left + width, top + height - c0, left + width - c0, top + height, left + width - rbr, top + height); // Move left in case the margin exceedes the radius\n\n  var topBottomXCoord = left + width - Math.max(borderRightWidth, rbr);\n  ctx.lineTo(topBottomXCoord, top + height); // Clip inner bottom right cap\n\n  ctx.lineTo(topBottomXCoord, top + height - borderBottomWidth); // Ellipse coefficients inner bottom right cap\n\n  var innerBottomRightRadiusX = Math.max(rbr - borderRightWidth, 0);\n  var innerBottomRightRadiusY = Math.max(rbr - borderBottomWidth, 0);\n  var c1 = innerBottomRightRadiusX * (1.0 - KAPPA);\n  var c2 = innerBottomRightRadiusY * (1.0 - KAPPA); // Clip inner top right cap\n\n  ctx.bezierCurveTo(left + width - borderRightWidth - c1, top + height - borderBottomWidth, left + width - borderRightWidth, top + height - borderBottomWidth - c2, left + width - borderRightWidth, top + height - Math.max(rbr, borderBottomWidth)); // Clip inner right border edge\n\n  ctx.lineTo(left + width - borderRightWidth, top + Math.max(rtr, borderTopWidth)); // Ellipse coefficients inner top right cap\n\n  var innerTopRightRadiusX = Math.max(rtr - borderRightWidth, 0);\n  var innerTopRightRadiusY = Math.max(rtr - borderTopWidth, 0);\n  var c3 = innerTopRightRadiusX * (1.0 - KAPPA);\n  var c4 = innerTopRightRadiusY * (1.0 - KAPPA);\n  var topRightXCoord = left + width - Math.max(rtr, borderRightWidth); // Clip inner top left cap\n\n  ctx.bezierCurveTo(left + width - borderRightWidth, top + borderTopWidth + c4, left + width - borderRightWidth - c3, top + borderTopWidth, topRightXCoord, top + borderTopWidth);\n  ctx.lineTo(topRightXCoord, top); // Move right in case the margin exceedes the radius\n\n  ctx.lineTo(left + width - rtr, top); // Ellipse coefficients outer top right cap\n\n  var c5 = rtr * (1.0 - KAPPA); // Clip outer top right cap\n\n  ctx.bezierCurveTo(left + width - c5, top, left + width, top + c5, left + width, top + rtr);\n  ctx.closePath();\n  ctx.clip(); // Clip border right cap joins\n\n  if (borderTopWidth) {\n    var trSlope = -borderTopWidth / borderRightWidth;\n    ctx.moveTo(left + width / 2, trSlope * (-width / 2) + top);\n    ctx.lineTo(left + width, top);\n    ctx.lineTo(left + width, top + height);\n    ctx.lineTo(left, top + height);\n    ctx.closePath();\n    ctx.clip();\n  }\n\n  if (borderBottomWidth) {\n    var brSlope = borderBottomWidth / borderRightWidth;\n    ctx.moveTo(left + width / 2, brSlope * (-width / 2) + top + height);\n    ctx.lineTo(left + width, top + height);\n    ctx.lineTo(left + width, top);\n    ctx.lineTo(left, top);\n    ctx.closePath();\n    ctx.clip();\n  }\n};\n\nvar fillBorderRight = function fillBorderRight(ctx, layout, style, rtr, rbr) {\n  var top = layout.top,\n      left = layout.left,\n      width = layout.width,\n      height = layout.height;\n  var borderRightColor = style.borderRightColor,\n      borderRightStyle = style.borderRightStyle,\n      borderRightWidth = style.borderRightWidth,\n      borderTopWidth = style.borderTopWidth,\n      borderBottomWidth = style.borderBottomWidth;\n  var c0 = rbr * (1.0 - KAPPA);\n  var c1 = rtr * (1.0 - KAPPA);\n  ctx.moveTo(left + width - rtr, top);\n  ctx.bezierCurveTo(left + width - c1, top, left + width, top + c1, left + width, top + rtr);\n  ctx.lineTo(left + width, top + height - rbr);\n  ctx.bezierCurveTo(left + width, top + height - c0, left + width - c0, top + height, left + width - rbr, top + height);\n  ctx.strokeColor(borderRightColor);\n  ctx.lineWidth(Math.max(borderRightWidth, borderTopWidth, borderBottomWidth) * 2);\n\n  if (borderRightStyle === 'dashed') {\n    ctx.dash(borderRightWidth * 2, {\n      space: borderRightWidth * 1.2\n    });\n  } else if (borderRightStyle === 'dotted') {\n    ctx.dash(borderRightWidth, {\n      space: borderRightWidth * 1.2\n    });\n  }\n\n  ctx.stroke();\n  ctx.undash();\n};\n\nvar clipBorderBottom = function clipBorderBottom(ctx, layout, style, rbl, rbr) {\n  var top = layout.top,\n      left = layout.left,\n      width = layout.width,\n      height = layout.height;\n  var borderBottomWidth = style.borderBottomWidth,\n      borderRightWidth = style.borderRightWidth,\n      borderLeftWidth = style.borderLeftWidth; // Clip outer top border edge\n\n  ctx.moveTo(left + width - rbr, top + height);\n  ctx.lineTo(left + rbl, top + height); // Ellipse coefficients outer top right cap\n\n  var c0 = rbl * (1.0 - KAPPA); // Clip outer top right cap\n\n  ctx.bezierCurveTo(left + c0, top + height, left, top + height - c0, left, top + height - rbl); // Move up in case the margin exceedes the radius\n\n  var bottomLeftYCoord = top + height - Math.max(borderBottomWidth, rbl);\n  ctx.lineTo(left, bottomLeftYCoord); // Clip inner bottom left cap\n\n  ctx.lineTo(left + borderLeftWidth, bottomLeftYCoord); // Ellipse coefficients inner top right cap\n\n  var innerBottomLeftRadiusX = Math.max(rbl - borderLeftWidth, 0);\n  var innerBottomLeftRadiusY = Math.max(rbl - borderBottomWidth, 0);\n  var c1 = innerBottomLeftRadiusX * (1.0 - KAPPA);\n  var c2 = innerBottomLeftRadiusY * (1.0 - KAPPA); // Clip inner bottom left cap\n\n  ctx.bezierCurveTo(left + borderLeftWidth, top + height - borderBottomWidth - c2, left + borderLeftWidth + c1, top + height - borderBottomWidth, left + borderLeftWidth + innerBottomLeftRadiusX, top + height - borderBottomWidth); // Clip inner bottom border edge\n\n  ctx.lineTo(left + width - Math.max(rbr, borderRightWidth), top + height - borderBottomWidth); // Ellipse coefficients inner top left cap\n\n  var innerBottomRightRadiusX = Math.max(rbr - borderRightWidth, 0);\n  var innerBottomRightRadiusY = Math.max(rbr - borderBottomWidth, 0);\n  var c3 = innerBottomRightRadiusX * (1.0 - KAPPA);\n  var c4 = innerBottomRightRadiusY * (1.0 - KAPPA);\n  var bottomRightYCoord = top + height - Math.max(borderBottomWidth, rbr); // Clip inner top left cap\n\n  ctx.bezierCurveTo(left + width - borderRightWidth - c3, top + height - borderBottomWidth, left + width - borderRightWidth, top + height - borderBottomWidth - c4, left + width - borderRightWidth, bottomRightYCoord);\n  ctx.lineTo(left + width, bottomRightYCoord); // Move down in case the margin exceedes the radius\n\n  ctx.lineTo(left + width, top + height - rbr); // Ellipse coefficients outer top left cap\n\n  var c5 = rbr * (1.0 - KAPPA); // Clip outer top left cap\n\n  ctx.bezierCurveTo(left + width, top + height - c5, left + width - c5, top + height, left + width - rbr, top + height);\n  ctx.closePath();\n  ctx.clip(); // Clip border bottom cap joins\n\n  if (borderRightWidth) {\n    var brSlope = borderBottomWidth / borderRightWidth;\n    ctx.moveTo(left + width / 2, brSlope * (-width / 2) + top + height);\n    ctx.lineTo(left + width, top + height);\n    ctx.lineTo(left, top + height);\n    ctx.lineTo(left, top);\n    ctx.closePath();\n    ctx.clip();\n  }\n\n  if (borderLeftWidth) {\n    var trSlope = -borderBottomWidth / borderLeftWidth;\n    ctx.moveTo(left + width / 2, trSlope * (width / 2) + top + height);\n    ctx.lineTo(left, top + height);\n    ctx.lineTo(left + width, top + height);\n    ctx.lineTo(left + width, top);\n    ctx.closePath();\n    ctx.clip();\n  }\n};\n\nvar fillBorderBottom = function fillBorderBottom(ctx, layout, style, rbl, rbr) {\n  var top = layout.top,\n      left = layout.left,\n      width = layout.width,\n      height = layout.height;\n  var borderBottomColor = style.borderBottomColor,\n      borderBottomStyle = style.borderBottomStyle,\n      borderBottomWidth = style.borderBottomWidth,\n      borderRightWidth = style.borderRightWidth,\n      borderLeftWidth = style.borderLeftWidth;\n  var c0 = rbl * (1.0 - KAPPA);\n  var c1 = rbr * (1.0 - KAPPA);\n  ctx.moveTo(left + width, top + height - rbr);\n  ctx.bezierCurveTo(left + width, top + height - c1, left + width - c1, top + height, left + width - rbr, top + height);\n  ctx.lineTo(left + rbl, top + height);\n  ctx.bezierCurveTo(left + c0, top + height, left, top + height - c0, left, top + height - rbl);\n  ctx.strokeColor(borderBottomColor);\n  ctx.lineWidth(Math.max(borderBottomWidth, borderRightWidth, borderLeftWidth) * 2);\n\n  if (borderBottomStyle === 'dashed') {\n    ctx.dash(borderBottomWidth * 2, {\n      space: borderBottomWidth * 1.2\n    });\n  } else if (borderBottomStyle === 'dotted') {\n    ctx.dash(borderBottomWidth, {\n      space: borderBottomWidth * 1.2\n    });\n  }\n\n  ctx.stroke();\n  ctx.undash();\n};\n\nvar clipBorderLeft = function clipBorderLeft(ctx, layout, style, rbl, rtl) {\n  var top = layout.top,\n      left = layout.left,\n      width = layout.width,\n      height = layout.height;\n  var borderTopWidth = style.borderTopWidth,\n      borderLeftWidth = style.borderLeftWidth,\n      borderBottomWidth = style.borderBottomWidth; // Clip outer left border edge\n\n  ctx.moveTo(left, top + height - rbl);\n  ctx.lineTo(left, top + rtl); // Ellipse coefficients outer top left cap\n\n  var c0 = rtl * (1.0 - KAPPA); // Clip outer top left cap\n\n  ctx.bezierCurveTo(left, top + c0, left + c0, top, left + rtl, top); // Move right in case the margin exceedes the radius\n\n  var topLeftCoordX = left + Math.max(borderLeftWidth, rtl);\n  ctx.lineTo(topLeftCoordX, top); // Clip inner top left cap\n\n  ctx.lineTo(topLeftCoordX, top + borderTopWidth); // Ellipse coefficients inner top left cap\n\n  var innerTopLeftRadiusX = Math.max(rtl - borderLeftWidth, 0);\n  var innerTopLeftRadiusY = Math.max(rtl - borderTopWidth, 0);\n  var c1 = innerTopLeftRadiusX * (1.0 - KAPPA);\n  var c2 = innerTopLeftRadiusY * (1.0 - KAPPA); // Clip inner top right cap\n\n  ctx.bezierCurveTo(left + borderLeftWidth + c1, top + borderTopWidth, left + borderLeftWidth, top + borderTopWidth + c2, left + borderLeftWidth, top + Math.max(rtl, borderTopWidth)); // Clip inner left border edge\n\n  ctx.lineTo(left + borderLeftWidth, top + height - Math.max(rbl, borderBottomWidth)); // Ellipse coefficients inner bottom left cap\n\n  var innerBottomLeftRadiusX = Math.max(rbl - borderLeftWidth, 0);\n  var innerBottomLeftRadiusY = Math.max(rbl - borderBottomWidth, 0);\n  var c3 = innerBottomLeftRadiusX * (1.0 - KAPPA);\n  var c4 = innerBottomLeftRadiusY * (1.0 - KAPPA);\n  var bottomLeftXCoord = left + Math.max(rbl, borderLeftWidth); // Clip inner top left cap\n\n  ctx.bezierCurveTo(left + borderLeftWidth, top + height - borderBottomWidth - c4, left + borderLeftWidth + c3, top + height - borderBottomWidth, bottomLeftXCoord, top + height - borderBottomWidth);\n  ctx.lineTo(bottomLeftXCoord, top + height); // Move left in case the margin exceedes the radius\n\n  ctx.lineTo(left + rbl, top + height); // Ellipse coefficients outer top right cap\n\n  var c5 = rbl * (1.0 - KAPPA); // Clip outer top right cap\n\n  ctx.bezierCurveTo(left + c5, top + height, left, top + height - c5, left, top + height - rbl);\n  ctx.closePath();\n  ctx.clip(); // Clip border right cap joins\n\n  if (borderBottomWidth) {\n    var trSlope = -borderBottomWidth / borderLeftWidth;\n    ctx.moveTo(left + width / 2, trSlope * (width / 2) + top + height);\n    ctx.lineTo(left, top + height);\n    ctx.lineTo(left, top);\n    ctx.lineTo(left + width, top);\n    ctx.closePath();\n    ctx.clip();\n  }\n\n  if (borderBottomWidth) {\n    var _trSlope2 = -borderTopWidth / borderLeftWidth;\n\n    ctx.moveTo(left + width / 2, _trSlope2 * (-width / 2) + top);\n    ctx.lineTo(left, top);\n    ctx.lineTo(left, top + height);\n    ctx.lineTo(left + width, top + height);\n    ctx.closePath();\n    ctx.clip();\n  }\n};\n\nvar fillBorderLeft = function fillBorderLeft(ctx, layout, style, rbl, rtl) {\n  var top = layout.top,\n      left = layout.left,\n      height = layout.height;\n  var borderLeftColor = style.borderLeftColor,\n      borderLeftStyle = style.borderLeftStyle,\n      borderLeftWidth = style.borderLeftWidth,\n      borderTopWidth = style.borderTopWidth,\n      borderBottomWidth = style.borderBottomWidth;\n  var c0 = rbl * (1.0 - KAPPA);\n  var c1 = rtl * (1.0 - KAPPA);\n  ctx.moveTo(left + rbl, top + height);\n  ctx.bezierCurveTo(left + c0, top + height, left, top + height - c0, left, top + height - rbl);\n  ctx.lineTo(left, top + rtl);\n  ctx.bezierCurveTo(left, top + c1, left + c1, top, left + rtl, top);\n  ctx.strokeColor(borderLeftColor);\n  ctx.lineWidth(Math.max(borderLeftWidth, borderTopWidth, borderBottomWidth) * 2);\n\n  if (borderLeftStyle === 'dashed') {\n    ctx.dash(borderLeftWidth * 2, {\n      space: borderLeftWidth * 1.2\n    });\n  } else if (borderLeftStyle === 'dotted') {\n    ctx.dash(borderLeftWidth, {\n      space: borderLeftWidth * 1.2\n    });\n  }\n\n  ctx.stroke();\n  ctx.undash();\n};\n\nvar shouldRenderBorders = function shouldRenderBorders(node) {\n  return node.box && (node.box.borderTopWidth || node.box.borderRightWidth || node.box.borderBottomWidth || node.box.borderLeftWidth);\n};\n\nvar renderBorders = function renderBorders(ctx, node) {\n  if (!shouldRenderBorders(node)) return node;\n  var _node$box = node.box,\n      width = _node$box.width,\n      height = _node$box.height,\n      borderTopWidth = _node$box.borderTopWidth,\n      borderLeftWidth = _node$box.borderLeftWidth,\n      borderRightWidth = _node$box.borderRightWidth,\n      borderBottomWidth = _node$box.borderBottomWidth;\n  var _node$style = node.style,\n      opacity = _node$style.opacity,\n      _node$style$borderTop = _node$style.borderTopLeftRadius,\n      borderTopLeftRadius = _node$style$borderTop === void 0 ? 0 : _node$style$borderTop,\n      _node$style$borderTop2 = _node$style.borderTopRightRadius,\n      borderTopRightRadius = _node$style$borderTop2 === void 0 ? 0 : _node$style$borderTop2,\n      _node$style$borderBot = _node$style.borderBottomLeftRadius,\n      borderBottomLeftRadius = _node$style$borderBot === void 0 ? 0 : _node$style$borderBot,\n      _node$style$borderBot2 = _node$style.borderBottomRightRadius,\n      borderBottomRightRadius = _node$style$borderBot2 === void 0 ? 0 : _node$style$borderBot2,\n      _node$style$borderTop3 = _node$style.borderTopColor,\n      borderTopColor = _node$style$borderTop3 === void 0 ? 'black' : _node$style$borderTop3,\n      _node$style$borderTop4 = _node$style.borderTopStyle,\n      borderTopStyle = _node$style$borderTop4 === void 0 ? 'solid' : _node$style$borderTop4,\n      _node$style$borderLef = _node$style.borderLeftColor,\n      borderLeftColor = _node$style$borderLef === void 0 ? 'black' : _node$style$borderLef,\n      _node$style$borderLef2 = _node$style.borderLeftStyle,\n      borderLeftStyle = _node$style$borderLef2 === void 0 ? 'solid' : _node$style$borderLef2,\n      _node$style$borderRig = _node$style.borderRightColor,\n      borderRightColor = _node$style$borderRig === void 0 ? 'black' : _node$style$borderRig,\n      _node$style$borderRig2 = _node$style.borderRightStyle,\n      borderRightStyle = _node$style$borderRig2 === void 0 ? 'solid' : _node$style$borderRig2,\n      _node$style$borderBot3 = _node$style.borderBottomColor,\n      borderBottomColor = _node$style$borderBot3 === void 0 ? 'black' : _node$style$borderBot3,\n      _node$style$borderBot4 = _node$style.borderBottomStyle,\n      borderBottomStyle = _node$style$borderBot4 === void 0 ? 'solid' : _node$style$borderBot4;\n  var style = {\n    borderTopColor: borderTopColor,\n    borderTopWidth: borderTopWidth,\n    borderTopStyle: borderTopStyle,\n    borderLeftColor: borderLeftColor,\n    borderLeftWidth: borderLeftWidth,\n    borderLeftStyle: borderLeftStyle,\n    borderRightColor: borderRightColor,\n    borderRightWidth: borderRightWidth,\n    borderRightStyle: borderRightStyle,\n    borderBottomColor: borderBottomColor,\n    borderBottomWidth: borderBottomWidth,\n    borderBottomStyle: borderBottomStyle,\n    borderTopLeftRadius: borderTopLeftRadius,\n    borderTopRightRadius: borderTopRightRadius,\n    borderBottomLeftRadius: borderBottomLeftRadius,\n    borderBottomRightRadius: borderBottomRightRadius\n  };\n  var rtr = Math.min(borderTopRightRadius, 0.5 * width, 0.5 * height);\n  var rtl = Math.min(borderTopLeftRadius, 0.5 * width, 0.5 * height);\n  var rbr = Math.min(borderBottomRightRadius, 0.5 * width, 0.5 * height);\n  var rbl = Math.min(borderBottomLeftRadius, 0.5 * width, 0.5 * height);\n  ctx.save();\n  ctx.strokeOpacity(opacity);\n\n  if (borderTopWidth) {\n    ctx.save();\n    clipBorderTop(ctx, node.box, style, rtr, rtl);\n    fillBorderTop(ctx, node.box, style, rtr, rtl);\n    ctx.restore();\n  }\n\n  if (borderRightWidth) {\n    ctx.save();\n    clipBorderRight(ctx, node.box, style, rtr, rbr);\n    fillBorderRight(ctx, node.box, style, rtr, rbr);\n    ctx.restore();\n  }\n\n  if (borderBottomWidth) {\n    ctx.save();\n    clipBorderBottom(ctx, node.box, style, rbl, rbr);\n    fillBorderBottom(ctx, node.box, style, rbl, rbr);\n    ctx.restore();\n  }\n\n  if (borderLeftWidth) {\n    ctx.save();\n    clipBorderLeft(ctx, node.box, style, rbl, rtl);\n    fillBorderLeft(ctx, node.box, style, rbl, rtl);\n    ctx.restore();\n  }\n\n  ctx.restore();\n  return node;\n};\n\nvar _default = R.curryN(2, renderBorders);\n\nexports.default = _default;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}